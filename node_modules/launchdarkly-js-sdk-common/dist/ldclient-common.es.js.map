{"version":3,"file":"ldclient-common.es.js","sources":["../src/errors.js","../node_modules/base64-js/index.js","../node_modules/fast-deep-equal/index.js","../src/utils.js","../node_modules/uuid/lib/bytesToUuid.js","../node_modules/uuid/lib/rng-browser.js","../node_modules/uuid/v1.js","../src/EventSender.js","../src/EventSummarizer.js","../src/UserFilter.js","../src/messages.js","../src/EventEmitter.js","../src/InitializationState.js","../src/Store.js","../src/Stream.js","../src/Requestor.js","../src/promiseCoalescer.js","../src/UserValidator.js","../src/configuration.js","../src/diagnosticEvents.js","../src/consoleLogger.js","../src/index.js","../src/EventProcessor.js","../src/Identity.js"],"sourcesContent":["function createCustomError(name) {\n  function CustomError(message, code) {\n    Error.captureStackTrace && Error.captureStackTrace(this, this.constructor);\n    this.message = message;\n    this.code = code;\n  }\n\n  CustomError.prototype = new Error();\n  CustomError.prototype.name = name;\n  CustomError.prototype.constructor = CustomError;\n\n  return CustomError;\n}\n\nexport const LDUnexpectedResponseError = createCustomError('LaunchDarklyUnexpectedResponseError');\nexport const LDInvalidEnvironmentIdError = createCustomError('LaunchDarklyInvalidEnvironmentIdError');\nexport const LDInvalidUserError = createCustomError('LaunchDarklyInvalidUserError');\nexport const LDInvalidEventKeyError = createCustomError('LaunchDarklyInvalidEventKeyError');\nexport const LDInvalidArgumentError = createCustomError('LaunchDarklyInvalidArgumentError');\nexport const LDFlagFetchError = createCustomError('LaunchDarklyFlagFetchError');\n\nexport function isHttpErrorRecoverable(status) {\n  if (status >= 400 && status < 500) {\n    return status === 400 || status === 408 || status === 429;\n  }\n  return true;\n}\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","'use strict';\n\nvar isArray = Array.isArray;\nvar keyList = Object.keys;\nvar hasProp = Object.prototype.hasOwnProperty;\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    var arrA = isArray(a)\n      , arrB = isArray(b)\n      , i\n      , length\n      , key;\n\n    if (arrA && arrB) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n    if (arrA != arrB) return false;\n\n    var dateA = a instanceof Date\n      , dateB = b instanceof Date;\n    if (dateA != dateB) return false;\n    if (dateA && dateB) return a.getTime() == b.getTime();\n\n    var regexpA = a instanceof RegExp\n      , regexpB = b instanceof RegExp;\n    if (regexpA != regexpB) return false;\n    if (regexpA && regexpB) return a.toString() == b.toString();\n\n    var keys = keyList(a);\n    length = keys.length;\n\n    if (length !== keyList(b).length)\n      return false;\n\n    for (i = length; i-- !== 0;)\n      if (!hasProp.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      key = keys[i];\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  return a!==a && b!==b;\n};\n","import * as base64 from 'base64-js';\nimport fastDeepEqual from 'fast-deep-equal';\n\nconst userAttrsToStringify = ['key', 'secondary', 'ip', 'country', 'email', 'firstName', 'lastName', 'avatar', 'name'];\n\n// See http://ecmanaut.blogspot.com/2006/07/encoding-decoding-utf8-in-javascript.html\nexport function btoa(s) {\n  const escaped = unescape(encodeURIComponent(s));\n  return base64.fromByteArray(stringToBytes(escaped));\n}\n\nfunction stringToBytes(s) {\n  const b = [];\n  for (let i = 0; i < s.length; i++) {\n    b.push(s.charCodeAt(i));\n  }\n  return b;\n}\n\nexport function base64URLEncode(s) {\n  return (\n    btoa(s)\n      // eslint-disable-next-line\n      .replace(/=/g, '')\n      .replace(/\\+/g, '-')\n      .replace(/\\//g, '_')\n  );\n}\n\nexport function clone(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}\n\nexport function deepEquals(a, b) {\n  return fastDeepEqual(a, b);\n}\n\n// Events emitted in LDClient's initialize method will happen before the consumer\n// can register a listener, so defer them to next tick.\nexport function onNextTick(cb) {\n  setTimeout(cb, 0);\n}\n\n/**\n * Wrap a promise to invoke an optional callback upon resolution or rejection.\n *\n * This function assumes the callback follows the Node.js callback type: (err, value) => void\n *\n * If a callback is provided:\n *   - if the promise is resolved, invoke the callback with (null, value)\n *   - if the promise is rejected, invoke the callback with (error, null)\n *\n * @param {Promise<any>} promise\n * @param {Function} callback\n * @returns Promise<any> | undefined\n */\nexport function wrapPromiseCallback(promise, callback) {\n  const ret = promise.then(\n    value => {\n      if (callback) {\n        setTimeout(() => {\n          callback(null, value);\n        }, 0);\n      }\n      return value;\n    },\n    error => {\n      if (callback) {\n        setTimeout(() => {\n          callback(error, null);\n        }, 0);\n      } else {\n        return Promise.reject(error);\n      }\n    }\n  );\n\n  return !callback ? ret : undefined;\n}\n\n/**\n * Takes a map of flag keys to values, and returns the more verbose structure used by the\n * client stream.\n */\nexport function transformValuesToVersionedValues(flags) {\n  const ret = {};\n  for (const key in flags) {\n    if (objectHasOwnProperty(flags, key)) {\n      ret[key] = { value: flags[key], version: 0 };\n    }\n  }\n  return ret;\n}\n\n/**\n * Converts the internal flag state map to a simple map of flag keys to values.\n */\nexport function transformVersionedValuesToValues(flagsState) {\n  const ret = {};\n  for (const key in flagsState) {\n    if (objectHasOwnProperty(flagsState, key)) {\n      ret[key] = flagsState[key].value;\n    }\n  }\n  return ret;\n}\n\n/**\n * Returns an array of event groups each of which can be safely URL-encoded\n * without hitting the safe maximum URL length of certain browsers.\n *\n * @param {number} maxLength maximum URL length targeted\n * @param {Array[Object}]} events queue of events to divide\n * @returns Array[Array[Object]]\n */\nexport function chunkUserEventsForUrl(maxLength, events) {\n  const allEvents = events.slice(0);\n  const allChunks = [];\n  let remainingSpace = maxLength;\n  let chunk;\n\n  while (allEvents.length > 0) {\n    chunk = [];\n\n    while (remainingSpace > 0) {\n      const event = allEvents.shift();\n      if (!event) {\n        break;\n      }\n      remainingSpace = remainingSpace - base64URLEncode(JSON.stringify(event)).length;\n      // If we are over the max size, put this one back on the queue\n      // to try in the next round, unless this event alone is larger\n      // than the limit, in which case, screw it, and try it anyway.\n      if (remainingSpace < 0 && chunk.length > 0) {\n        allEvents.unshift(event);\n      } else {\n        chunk.push(event);\n      }\n    }\n\n    remainingSpace = maxLength;\n    allChunks.push(chunk);\n  }\n\n  return allChunks;\n}\n\nexport function getLDUserAgentString(platform) {\n  const version = platform.version || VERSION;\n  return platform.userAgent + '/' + version;\n}\n\nexport function getLDHeaders(platform, options) {\n  if (options && !options.sendLDHeaders) {\n    return {};\n  }\n  const h = {\n    'X-LaunchDarkly-User-Agent': getLDUserAgentString(platform),\n  };\n  if (options && options.wrapperName) {\n    h['X-LaunchDarkly-Wrapper'] = options.wrapperVersion\n      ? options.wrapperName + '/' + options.wrapperVersion\n      : options.wrapperName;\n  }\n  return h;\n}\n\nexport function extend(...objects) {\n  return objects.reduce((acc, obj) => ({ ...acc, ...obj }), {});\n}\n\nexport function objectHasOwnProperty(object, name) {\n  return Object.prototype.hasOwnProperty.call(object, name);\n}\n\nexport function sanitizeUser(user) {\n  if (!user) {\n    return user;\n  }\n  let newUser;\n  for (const i in userAttrsToStringify) {\n    const attr = userAttrsToStringify[i];\n    const value = user[attr];\n    if (value !== undefined && typeof value !== 'string') {\n      newUser = newUser || { ...user };\n      newUser[attr] = String(value);\n    }\n  }\n  return newUser || user;\n}\n","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([bth[buf[i++]], bth[buf[i++]], \n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]]]).join('');\n}\n\nmodule.exports = bytesToUuid;\n","// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto\n// implementation. Also, find the complete implementation of crypto on IE11.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));\n\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\nvar _clockseq;\n\n// Previous uuid creation time\nvar _lastMSecs = 0;\nvar _lastNSecs = 0;\n\n// See https://github.com/broofa/node-uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n  if (node == null || clockseq == null) {\n    var seedBytes = rng();\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [\n        seedBytes[0] | 0x01,\n        seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]\n      ];\n    }\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  }\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : bytesToUuid(b);\n}\n\nmodule.exports = v1;\n","import * as errors from './errors';\nimport * as utils from './utils';\nimport uuidv1 from 'uuid/v1';\n\nconst MAX_URL_LENGTH = 2000;\n\nexport default function EventSender(platform, environmentId, options) {\n  const imageUrlPath = '/a/' + environmentId + '.gif';\n  const baseHeaders = utils.extend({ 'Content-Type': 'application/json' }, utils.getLDHeaders(platform, options));\n  const httpFallbackPing = platform.httpFallbackPing; // this will be set for us if we're in the browser SDK\n  const sender = {};\n\n  function getResponseInfo(result) {\n    const ret = { status: result.status };\n    const dateStr = result.header('date');\n    if (dateStr) {\n      const time = Date.parse(dateStr);\n      if (time) {\n        ret.serverTime = time;\n      }\n    }\n    return ret;\n  }\n\n  sender.sendChunk = (events, url, isDiagnostic, usePost) => {\n    const jsonBody = JSON.stringify(events);\n    const payloadId = isDiagnostic ? null : uuidv1();\n\n    function doPostRequest(canRetry) {\n      const headers = isDiagnostic\n        ? baseHeaders\n        : utils.extend({}, baseHeaders, {\n            'X-LaunchDarkly-Event-Schema': '3',\n            'X-LaunchDarkly-Payload-ID': payloadId,\n          });\n      return platform\n        .httpRequest('POST', url, headers, jsonBody)\n        .promise.then(result => {\n          if (!result) {\n            // This was a response from a fire-and-forget request, so we won't have a status.\n            return;\n          }\n          if (result.status >= 400 && errors.isHttpErrorRecoverable(result.status) && canRetry) {\n            return doPostRequest(false);\n          } else {\n            return getResponseInfo(result);\n          }\n        })\n        .catch(() => {\n          if (canRetry) {\n            return doPostRequest(false);\n          }\n          return Promise.reject();\n        });\n    }\n\n    if (usePost) {\n      return doPostRequest(true).catch(() => {});\n    } else {\n      httpFallbackPing && httpFallbackPing(url + imageUrlPath + '?d=' + utils.base64URLEncode(jsonBody));\n      return Promise.resolve(); // we don't wait for this request to complete, it's just a one-way ping\n    }\n  };\n\n  sender.sendEvents = function(events, url, isDiagnostic) {\n    if (!platform.httpRequest) {\n      return Promise.resolve();\n    }\n    const canPost = platform.httpAllowsPost();\n    let chunks;\n    if (canPost) {\n      // no need to break up events into chunks if we can send a POST\n      chunks = [events];\n    } else {\n      chunks = utils.chunkUserEventsForUrl(MAX_URL_LENGTH - url.length, events);\n    }\n    const results = [];\n    for (let i = 0; i < chunks.length; i++) {\n      results.push(sender.sendChunk(chunks[i], url, isDiagnostic, canPost));\n    }\n    return Promise.all(results);\n  };\n\n  return sender;\n}\n","export default function EventSummarizer() {\n  const es = {};\n\n  let startDate = 0,\n    endDate = 0,\n    counters = {};\n\n  es.summarizeEvent = function(event) {\n    if (event.kind === 'feature') {\n      const counterKey =\n        event.key +\n        ':' +\n        (event.variation !== null && event.variation !== undefined ? event.variation : '') +\n        ':' +\n        (event.version !== null && event.version !== undefined ? event.version : '');\n      const counterVal = counters[counterKey];\n      if (counterVal) {\n        counterVal.count = counterVal.count + 1;\n      } else {\n        counters[counterKey] = {\n          count: 1,\n          key: event.key,\n          variation: event.variation,\n          version: event.version,\n          value: event.value,\n          default: event.default,\n        };\n      }\n      if (startDate === 0 || event.creationDate < startDate) {\n        startDate = event.creationDate;\n      }\n      if (event.creationDate > endDate) {\n        endDate = event.creationDate;\n      }\n    }\n  };\n\n  es.getSummary = function() {\n    const flagsOut = {};\n    let empty = true;\n    for (const i in counters) {\n      const c = counters[i];\n      let flag = flagsOut[c.key];\n      if (!flag) {\n        flag = {\n          default: c.default,\n          counters: [],\n        };\n        flagsOut[c.key] = flag;\n      }\n      const counterOut = {\n        value: c.value,\n        count: c.count,\n      };\n      if (c.variation !== undefined && c.variation !== null) {\n        counterOut.variation = c.variation;\n      }\n      if (c.version) {\n        counterOut.version = c.version;\n      } else {\n        counterOut.unknown = true;\n      }\n      flag.counters.push(counterOut);\n      empty = false;\n    }\n    return empty\n      ? null\n      : {\n          startDate,\n          endDate,\n          features: flagsOut,\n        };\n  };\n\n  es.clearSummary = function() {\n    startDate = 0;\n    endDate = 0;\n    counters = {};\n  };\n\n  return es;\n}\n","import * as utils from './utils';\n\n/**\n * The UserFilter object transforms user objects into objects suitable to be sent as JSON to\n * the server, hiding any private user attributes.\n *\n * @param {Object} the LaunchDarkly client configuration object\n **/\nexport default function UserFilter(config) {\n  const filter = {};\n  const allAttributesPrivate = config.allAttributesPrivate;\n  const privateAttributeNames = config.privateAttributeNames || [];\n  const ignoreAttrs = { key: true, custom: true, anonymous: true };\n  const allowedTopLevelAttrs = {\n    key: true,\n    secondary: true,\n    ip: true,\n    country: true,\n    email: true,\n    firstName: true,\n    lastName: true,\n    avatar: true,\n    name: true,\n    anonymous: true,\n    custom: true,\n  };\n\n  filter.filterUser = function(user) {\n    if (!user) {\n      return null;\n    }\n    const userPrivateAttrs = user.privateAttributeNames || [];\n\n    const isPrivateAttr = function(name) {\n      return (\n        !ignoreAttrs[name] &&\n        (allAttributesPrivate || userPrivateAttrs.indexOf(name) !== -1 || privateAttributeNames.indexOf(name) !== -1)\n      );\n    };\n    const filterAttrs = function(props, isAttributeAllowed) {\n      return Object.keys(props).reduce(\n        (acc, name) => {\n          const ret = acc;\n          if (isAttributeAllowed(name)) {\n            if (isPrivateAttr(name)) {\n              // add to hidden list\n              ret[1][name] = true;\n            } else {\n              ret[0][name] = props[name];\n            }\n          }\n          return ret;\n        },\n        [{}, {}]\n      );\n    };\n    const result = filterAttrs(user, key => allowedTopLevelAttrs[key]);\n    const filteredProps = result[0];\n    let removedAttrs = result[1];\n    if (user.custom) {\n      const customResult = filterAttrs(user.custom, () => true);\n      filteredProps.custom = customResult[0];\n      removedAttrs = utils.extend({}, removedAttrs, customResult[1]);\n    }\n    const removedAttrNames = Object.keys(removedAttrs);\n    if (removedAttrNames.length) {\n      removedAttrNames.sort();\n      filteredProps.privateAttrs = removedAttrNames;\n    }\n    return filteredProps;\n  };\n  return filter;\n}\n","import * as errors from './errors';\n\nfunction errorString(err) {\n  if (err && err.message) {\n    return err.message;\n  }\n  if (typeof err === 'string' || err instanceof String) {\n    return err;\n  }\n  return JSON.stringify(err);\n}\n\nexport const clientInitialized = function() {\n  return 'LaunchDarkly client initialized';\n};\n\nconst docLink =\n  ' Please see https://docs.launchdarkly.com/docs/js-sdk-reference#section-initializing-the-client for instructions on SDK initialization.';\n\nexport const clientNotReady = function() {\n  return 'LaunchDarkly client is not ready';\n};\n\nexport const eventCapacityExceeded = function() {\n  return 'Exceeded event queue capacity. Increase capacity to avoid dropping events.';\n};\n\nexport const eventWithoutUser = function() {\n  return 'Be sure to call `identify` in the LaunchDarkly client: https://docs.launchdarkly.com/docs/js-sdk-reference#section-analytics-events';\n};\n\nexport const invalidContentType = function(contentType) {\n  return 'Expected application/json content type but got \"' + contentType + '\"';\n};\n\nexport const invalidKey = function() {\n  return 'Event key must be a string';\n};\n\nexport const localStorageUnavailable = function() {\n  return 'localStorage is unavailable';\n};\n\nexport const localStorageUnavailableForUserId = function() {\n  return 'localStorage is unavailable, so anonymous user ID cannot be cached';\n};\n\nexport const networkError = e => 'network error' + (e ? ' (' + e + ')' : '');\n\nexport const unknownCustomEventKey = function(key) {\n  return 'Custom event \"' + key + '\" does not exist';\n};\n\nexport const environmentNotFound = function() {\n  return 'Environment not found. Double check that you specified a valid environment/client-side ID.' + docLink;\n};\n\nexport const environmentNotSpecified = function() {\n  return 'No environment/client-side ID was specified.' + docLink;\n};\n\nexport const errorFetchingFlags = function(err) {\n  return 'Error fetching flag settings: ' + errorString(err);\n};\n\nexport const userNotSpecified = function() {\n  return 'No user specified.' + docLink;\n};\n\nexport const invalidUser = function() {\n  return 'Invalid user specified.' + docLink;\n};\n\nexport const bootstrapOldFormat = function() {\n  return (\n    'LaunchDarkly client was initialized with bootstrap data that did not include flag metadata. ' +\n    'Events may not be sent correctly.' +\n    docLink\n  );\n};\n\nexport const bootstrapInvalid = function() {\n  return 'LaunchDarkly bootstrap data is not available because the back end could not read the flags.';\n};\n\nexport const deprecated = function(oldName, newName) {\n  if (newName) {\n    return '\"' + oldName + '\" is deprecated, please use \"' + newName + '\"';\n  }\n  return '\"' + oldName + '\" is deprecated';\n};\n\nexport const httpErrorMessage = function(status, context, retryMessage) {\n  return (\n    'Received error ' +\n    status +\n    (status === 401 ? ' (invalid SDK key)' : '') +\n    ' for ' +\n    context +\n    ' - ' +\n    (errors.isHttpErrorRecoverable(status) ? retryMessage : 'giving up permanently')\n  );\n};\n\nexport const httpUnavailable = function() {\n  return 'Cannot make HTTP requests in this environment.' + docLink;\n};\n\nexport const identifyDisabled = function() {\n  return 'identify() has no effect here; it must be called on the main client instance';\n};\n\nexport const streamClosing = function() {\n  return 'Closing stream connection';\n};\n\nexport const streamConnecting = function(url) {\n  return 'Opening stream connection to ' + url;\n};\n\nexport const streamError = function(err, streamReconnectDelay) {\n  return (\n    'Error on stream connection: ' +\n    errorString(err) +\n    ', will continue retrying every ' +\n    streamReconnectDelay +\n    ' milliseconds.'\n  );\n};\n\nexport const unknownOption = name => 'Ignoring unknown config option \"' + name + '\"';\n\nexport const wrongOptionType = (name, expectedType, actualType) =>\n  'Config option \"' + name + '\" should be of type ' + expectedType + ', got ' + actualType + ', using default value';\n\nexport const wrongOptionTypeBoolean = (name, actualType) =>\n  'Config option \"' + name + '\" should be a boolean, got ' + actualType + ', converting to boolean';\n\nexport const optionBelowMinimum = (name, value, minimum) =>\n  'Config option \"' + name + '\" was set to ' + value + ', changing to minimum value of ' + minimum;\n\nexport const debugPolling = function(url) {\n  return 'polling for feature flags at ' + url;\n};\n\nexport const debugStreamPing = function() {\n  return 'received ping message from stream';\n};\n\nexport const debugStreamPut = function() {\n  return 'received streaming update for all flags';\n};\n\nexport const debugStreamPatch = function(key) {\n  return 'received streaming update for flag \"' + key + '\"';\n};\n\nexport const debugStreamPatchIgnored = function(key) {\n  return 'received streaming update for flag \"' + key + '\" but ignored due to version check';\n};\n\nexport const debugStreamDelete = function(key) {\n  return 'received streaming deletion for flag \"' + key + '\"';\n};\n\nexport const debugStreamDeleteIgnored = function(key) {\n  return 'received streaming deletion for flag \"' + key + '\" but ignored due to version check';\n};\n\nexport const debugEnqueueingEvent = function(kind) {\n  return 'enqueueing \"' + kind + '\" event';\n};\n\nexport const debugPostingEvents = function(count) {\n  return 'sending ' + count + ' events';\n};\n\nexport const debugPostingDiagnosticEvent = function(event) {\n  return 'sending diagnostic event (' + event.kind + ')';\n};\n","export default function EventEmitter(logger) {\n  const emitter = {};\n  const events = {};\n\n  const listeningTo = event => !!events[event];\n\n  emitter.on = function(event, handler, context) {\n    events[event] = events[event] || [];\n    events[event] = events[event].concat({\n      handler: handler,\n      context: context,\n    });\n  };\n\n  emitter.off = function(event, handler, context) {\n    if (!events[event]) {\n      return;\n    }\n    for (let i = 0; i < events[event].length; i++) {\n      if (events[event][i].handler === handler && events[event][i].context === context) {\n        events[event] = events[event].slice(0, i).concat(events[event].slice(i + 1));\n      }\n    }\n  };\n\n  emitter.emit = function(event) {\n    if (!events[event]) {\n      return;\n    }\n    // Copy the list of handlers before iterating, in case any handler adds or removes another handler.\n    // Any such changes should not affect what we do here-- we want to notify every handler that existed\n    // at the moment that the event was fired.\n    const copiedHandlers = events[event].slice(0);\n    for (let i = 0; i < copiedHandlers.length; i++) {\n      copiedHandlers[i].handler.apply(copiedHandlers[i].context, Array.prototype.slice.call(arguments, 1));\n    }\n  };\n\n  emitter.getEvents = function() {\n    return Object.keys(events);\n  };\n\n  emitter.getEventListenerCount = function(event) {\n    return events[event] ? events[event].length : 0;\n  };\n\n  emitter.maybeReportError = function(error) {\n    if (!error) {\n      return;\n    }\n    if (listeningTo('error')) {\n      this.emit('error', error);\n    } else {\n      (logger || console).error(error.message);\n    }\n  };\n  return emitter;\n}\n","// This file provides an abstraction of the client's startup state.\n//\n// Startup can either succeed or fail exactly once; calling signalSuccess() or signalFailure()\n// after that point has no effect.\n//\n// On success, we fire both an \"initialized\" event and a \"ready\" event. Both the waitForInitialization()\n// promise and the waitUntilReady() promise are resolved in this case.\n//\n// On failure, we fire both a \"failed\" event (with the error as a parameter) and a \"ready\" event.\n// The waitForInitialization() promise is rejected, but the waitUntilReady() promise is resolved.\n//\n// To complicate things, we must *not* create the waitForInitialization() promise unless it is\n// requested, because otherwise failures would cause an *unhandled* rejection which can be a\n// serious problem in some environments. So we use a somewhat roundabout system for tracking the\n// initialization state and lazily creating this promise.\n\nconst readyEvent = 'ready',\n  successEvent = 'initialized',\n  failureEvent = 'failed';\n\nfunction InitializationStateTracker(eventEmitter) {\n  let succeeded = false,\n    failed = false,\n    failureValue = null,\n    initializationPromise = null;\n\n  const readyPromise = new Promise(resolve => {\n    const onReady = () => {\n      eventEmitter.off(readyEvent, onReady); // we can't use \"once\" because it's not available on some JS platforms\n      resolve();\n    };\n    eventEmitter.on(readyEvent, onReady);\n  }).catch(() => {}); // this Promise should never be rejected, but the catch handler is a safety measure\n\n  return {\n    getInitializationPromise: () => {\n      if (initializationPromise) {\n        return initializationPromise;\n      }\n      if (succeeded) {\n        return Promise.resolve();\n      }\n      if (failed) {\n        return Promise.reject(failureValue);\n      }\n      initializationPromise = new Promise((resolve, reject) => {\n        const onSuccess = () => {\n          eventEmitter.off(successEvent, onSuccess);\n          resolve();\n        };\n        const onFailure = err => {\n          eventEmitter.off(failureEvent, onFailure);\n          reject(err);\n        };\n        eventEmitter.on(successEvent, onSuccess);\n        eventEmitter.on(failureEvent, onFailure);\n      });\n      return initializationPromise;\n    },\n\n    getReadyPromise: () => readyPromise,\n\n    signalSuccess: () => {\n      if (!succeeded && !failed) {\n        succeeded = true;\n        eventEmitter.emit(successEvent);\n        eventEmitter.emit(readyEvent);\n      }\n    },\n\n    signalFailure: err => {\n      if (!succeeded && !failed) {\n        failed = true;\n        failureValue = err;\n        eventEmitter.emit(failureEvent, err);\n        eventEmitter.emit(readyEvent);\n      }\n      eventEmitter.maybeReportError(err); // the \"error\" event can be emitted more than once, unlike the others\n    },\n  };\n}\n\nmodule.exports = InitializationStateTracker;\n","import * as messages from './messages';\nimport * as utils from './utils';\n\n// The localStorageProvider is provided by the platform object. It should have the following\n// methods, each of which should return a Promise:\n// - get(key): Gets the string value, if any, for the given key\n// - set(key, value): Stores a string value for the given key\n// - remove(key): Removes the given key\nexport default function Store(localStorageProvider, environment, hash, ident, logger) {\n  const store = {};\n\n  function getFlagsKey() {\n    let key = '';\n    const user = ident.getUser();\n    if (user) {\n      key = hash || utils.btoa(JSON.stringify(user));\n    }\n    return 'ld:' + environment + ':' + key;\n  }\n\n  // Returns a Promise which will be resolved with a parsed JSON value if a stored value was available,\n  // resolved with null if there was no value, or rejected if storage was not available.\n  store.loadFlags = () =>\n    localStorageProvider\n      .get(getFlagsKey())\n      .then(dataStr => {\n        if (dataStr === null || dataStr === undefined) {\n          return null;\n        }\n        try {\n          let data = JSON.parse(dataStr);\n          if (data) {\n            const schema = data.$schema;\n            if (schema === undefined || schema < 1) {\n              data = utils.transformValuesToVersionedValues(data);\n            } else {\n              delete data['$schema'];\n            }\n          }\n          return data;\n        } catch (ex) {\n          return store.clearFlags().then(() => Promise.reject(ex));\n        }\n      })\n      .catch(err => {\n        logger.warn(messages.localStorageUnavailable());\n        return Promise.reject(err);\n      });\n\n  // Returns a Promise which will be resolved with no value if successful, or rejected if storage\n  // was not available.\n  store.saveFlags = flags => {\n    const data = utils.extend({}, flags, { $schema: 1 });\n    return localStorageProvider.set(getFlagsKey(), JSON.stringify(data)).catch(err => {\n      logger.warn(messages.localStorageUnavailable());\n      return Promise.reject(err);\n    });\n  };\n\n  // Returns a Promise which will be resolved with no value if successful, or rejected if storage\n  // was not available.\n  store.clearFlags = () =>\n    localStorageProvider.clear(getFlagsKey()).catch(err => {\n      logger.warn(messages.localStorageUnavailable());\n      return Promise.reject(err);\n    });\n\n  return store;\n}\n","import * as messages from './messages';\nimport { base64URLEncode, getLDHeaders, objectHasOwnProperty } from './utils';\n\n// The underlying event source implementation is abstracted via the platform object, which should\n// have these three properties:\n// eventSourceFactory(): a function that takes a URL and optional request body and returns an object\n//   with the same methods as the regular HTML5 EventSource object. Passing a body parameter means\n//   that the request should use REPORT instead of GET.\n// eventSourceIsActive(): a function that takes an EventSource-compatible object and returns true if\n//   it is in an active state (connected or connecting).\n// eventSourceAllowsReport: true if REPORT is supported.\n\nexport default function Stream(platform, config, environment, diagnosticsAccumulator) {\n  const baseUrl = config.streamUrl;\n  const logger = config.logger;\n  const stream = {};\n  const evalUrlPrefix = baseUrl + '/eval/' + environment;\n  const useReport = config.useReport;\n  const withReasons = config.evaluationReasons;\n  const streamReconnectDelay = config.streamReconnectDelay;\n  const headers = getLDHeaders(platform, config);\n  let firstConnectionErrorLogged = false;\n  let es = null;\n  let reconnectTimeoutReference = null;\n  let connectionAttemptStartTime;\n  let user = null;\n  let hash = null;\n  let handlers = null;\n\n  stream.connect = function(newUser, newHash, newHandlers) {\n    user = newUser;\n    hash = newHash;\n    handlers = {};\n    for (const key in newHandlers || {}) {\n      handlers[key] = function(e) {\n        // Reset the state for logging the first connection error so that the first\n        // connection error following a successful connection will once again be logged.\n        // We will decorate *all* handlers to do this to keep this abstraction agnostic\n        // for different stream implementations.\n        firstConnectionErrorLogged = false;\n        logConnectionResult(true);\n        newHandlers[key] && newHandlers[key](e);\n      };\n    }\n    tryConnect();\n  };\n\n  stream.disconnect = function() {\n    clearTimeout(reconnectTimeoutReference);\n    reconnectTimeoutReference = null;\n    closeConnection();\n  };\n\n  stream.isConnected = function() {\n    return !!(es && platform.eventSourceIsActive && platform.eventSourceIsActive(es));\n  };\n\n  function handleError(err) {\n    if (!firstConnectionErrorLogged) {\n      logger.warn(messages.streamError(err, streamReconnectDelay));\n      firstConnectionErrorLogged = true;\n    }\n    logConnectionResult(false);\n    closeConnection();\n    tryConnect(streamReconnectDelay);\n  }\n\n  function tryConnect(delay) {\n    if (!reconnectTimeoutReference) {\n      if (delay) {\n        reconnectTimeoutReference = setTimeout(openConnection, delay);\n      } else {\n        openConnection();\n      }\n    }\n  }\n\n  function openConnection() {\n    reconnectTimeoutReference = null;\n    let url;\n    let query = '';\n    const options = { headers };\n    if (platform.eventSourceFactory) {\n      if (hash !== null && hash !== undefined) {\n        query = 'h=' + hash;\n      }\n      if (useReport) {\n        if (platform.eventSourceAllowsReport) {\n          url = evalUrlPrefix;\n          options.method = 'REPORT';\n          options.headers['Content-Type'] = 'application/json';\n          options.body = JSON.stringify(user);\n        } else {\n          // if we can't do REPORT, fall back to the old ping-based stream\n          url = baseUrl + '/ping/' + environment;\n          query = '';\n        }\n      } else {\n        url = evalUrlPrefix + '/' + base64URLEncode(JSON.stringify(user));\n      }\n      if (withReasons) {\n        query = query + (query ? '&' : '') + 'withReasons=true';\n      }\n      url = url + (query ? '?' : '') + query;\n\n      closeConnection();\n      logger.info(messages.streamConnecting(url));\n      logConnectionStarted();\n\n      es = platform.eventSourceFactory(url, options);\n      for (const key in handlers) {\n        if (objectHasOwnProperty(handlers, key)) {\n          es.addEventListener(key, handlers[key]);\n        }\n      }\n\n      es.onerror = handleError;\n    }\n  }\n\n  function closeConnection() {\n    if (es) {\n      logger.info(messages.streamClosing());\n      es.close();\n      es = null;\n    }\n  }\n\n  function logConnectionStarted() {\n    connectionAttemptStartTime = new Date().getTime();\n  }\n\n  function logConnectionResult(success) {\n    if (connectionAttemptStartTime && diagnosticsAccumulator) {\n      diagnosticsAccumulator.recordStreamInit(\n        connectionAttemptStartTime,\n        !success,\n        new Date().getTime() - connectionAttemptStartTime\n      );\n    }\n    connectionAttemptStartTime = null;\n  }\n\n  return stream;\n}\n","import * as utils from './utils';\nimport * as errors from './errors';\nimport * as messages from './messages';\nimport promiseCoalescer from './promiseCoalescer';\n\nconst jsonContentType = 'application/json';\n\nfunction getResponseError(result) {\n  if (result.status === 404) {\n    return new errors.LDInvalidEnvironmentIdError(messages.environmentNotFound());\n  } else {\n    return new errors.LDFlagFetchError(messages.errorFetchingFlags(result.statusText || String(result.status)));\n  }\n}\n\nexport default function Requestor(platform, options, environment) {\n  const baseUrl = options.baseUrl;\n  const useReport = options.useReport;\n  const withReasons = options.evaluationReasons;\n  const logger = options.logger;\n\n  const requestor = {};\n\n  const activeRequests = {}; // map of URLs to promiseCoalescers\n\n  function fetchJSON(endpoint, body) {\n    if (!platform.httpRequest) {\n      return new Promise((resolve, reject) => {\n        reject(new errors.LDFlagFetchError(messages.httpUnavailable()));\n      });\n    }\n\n    const method = body ? 'REPORT' : 'GET';\n    const headers = utils.getLDHeaders(platform, options);\n    if (body) {\n      headers['Content-Type'] = jsonContentType;\n    }\n\n    let coalescer = activeRequests[endpoint];\n    if (!coalescer) {\n      coalescer = promiseCoalescer(() => {\n        // this will be called once there are no more active requests for the same endpoint\n        delete activeRequests[endpoint];\n      });\n      activeRequests[endpoint] = coalescer;\n    }\n\n    const req = platform.httpRequest(method, endpoint, headers, body);\n    const p = req.promise.then(\n      result => {\n        if (result.status === 200) {\n          if (result.header('content-type') && result.header('content-type').startsWith(jsonContentType)) {\n            return JSON.parse(result.body);\n          } else {\n            const message = messages.invalidContentType(result.header('content-type') || '');\n            return Promise.reject(new errors.LDFlagFetchError(message));\n          }\n        } else {\n          return Promise.reject(getResponseError(result));\n        }\n      },\n      e => Promise.reject(new errors.LDFlagFetchError(messages.networkError(e)))\n    );\n    coalescer.addPromise(p, () => {\n      // this will be called if another request for the same endpoint supersedes this one\n      req.cancel && req.cancel();\n    });\n    return coalescer.resultPromise;\n  }\n\n  // Performs a GET request to an arbitrary path under baseUrl. Returns a Promise which will resolve\n  // with the parsed JSON response, or will be rejected if the request failed.\n  requestor.fetchJSON = function(path) {\n    return fetchJSON(baseUrl + path, null);\n  };\n\n  // Requests the current state of all flags for the given user from LaunchDarkly. Returns a Promise\n  // which will resolve with the parsed JSON response, or will be rejected if the request failed.\n  requestor.fetchFlagSettings = function(user, hash) {\n    let data;\n    let endpoint;\n    let query = '';\n    let body;\n\n    if (useReport) {\n      endpoint = [baseUrl, '/sdk/evalx/', environment, '/user'].join('');\n      body = JSON.stringify(user);\n    } else {\n      data = utils.base64URLEncode(JSON.stringify(user));\n      endpoint = [baseUrl, '/sdk/evalx/', environment, '/users/', data].join('');\n    }\n    if (hash) {\n      query = 'h=' + hash;\n    }\n    if (withReasons) {\n      query = query + (query ? '&' : '') + 'withReasons=true';\n    }\n    endpoint = endpoint + (query ? '?' : '') + query;\n    logger.debug(messages.debugPolling(endpoint));\n\n    return fetchJSON(endpoint, body);\n  };\n\n  return requestor;\n}\n","// This function allows a series of Promises to be coalesced such that only the most recently\n// added one actually matters. For instance, if several HTTP requests are made to the same\n// endpoint and we want to ensure that whoever made each one always gets the latest data, each\n// can be passed to addPromise (on the same coalescer) and each caller can wait on the\n// coalescer.resultPromise; all three will then receive the result (or error) from the *last*\n// request, and the results of the first two will be discarded.\n//\n// The cancelFn callback, if present, will be called whenever an existing promise is being\n// discarded. This can be used for instance to abort an HTTP request that's now obsolete.\n//\n// The finallyFn callback, if present, is called on completion of the whole thing. This is\n// different from calling coalescer.resultPromise.finally() because it is executed before any\n// other handlers. Its purpose is to tell the caller that this coalescer should no longer be used.\n\nexport default function promiseCoalescer(finallyFn) {\n  let currentPromise;\n  let currentCancelFn;\n  let finalResolve;\n  let finalReject;\n\n  const coalescer = {};\n\n  coalescer.addPromise = (p, cancelFn) => {\n    currentPromise = p;\n    currentCancelFn && currentCancelFn();\n    currentCancelFn = cancelFn;\n\n    p.then(\n      result => {\n        if (currentPromise === p) {\n          finalResolve(result);\n          finallyFn && finallyFn();\n        }\n      },\n      error => {\n        if (currentPromise === p) {\n          finalReject(error);\n          finallyFn && finallyFn();\n        }\n      }\n    );\n  };\n\n  coalescer.resultPromise = new Promise((resolve, reject) => {\n    finalResolve = resolve;\n    finalReject = reject;\n  });\n\n  return coalescer;\n}\n","import uuidv1 from 'uuid/v1';\n\nimport * as errors from './errors';\nimport * as messages from './messages';\nimport * as utils from './utils';\n\n// Transforms the user object if necessary to make sure it has a valid key.\n// 1. If a key is present, but is not a string, change it to a string.\n// 2. If no key is present, and \"anonymous\" is true, use a UUID as a key. This is cached in local\n// storage if possible.\n// 3. If there is no key (or no user object), return an error.\n\nconst ldUserIdKey = 'ld:$anonUserId';\n\nexport default function UserValidator(localStorageProvider, logger) {\n  function getCachedUserId() {\n    if (localStorageProvider) {\n      return localStorageProvider.get(ldUserIdKey).catch(() => null);\n      // Not logging errors here, because if local storage fails for the get, it will presumably fail for the set,\n      // so we will end up logging an error in setCachedUserId anyway.\n    }\n    return Promise.resolve(null);\n  }\n\n  function setCachedUserId(id) {\n    if (localStorageProvider) {\n      return localStorageProvider.set(ldUserIdKey, id).catch(() => {\n        logger.warn(messages.localStorageUnavailableForUserId());\n      });\n    }\n    return Promise.resolve();\n  }\n\n  const ret = {};\n\n  // Validates the user, returning a Promise that resolves to the validated user, or rejects if there is an error.\n  ret.validateUser = user => {\n    if (!user) {\n      return Promise.reject(new errors.LDInvalidUserError(messages.userNotSpecified()));\n    }\n\n    const userOut = utils.clone(user);\n    if (userOut.key !== null && userOut.key !== undefined) {\n      userOut.key = userOut.key.toString();\n      return Promise.resolve(userOut);\n    }\n    if (userOut.anonymous) {\n      return getCachedUserId().then(cachedId => {\n        if (cachedId) {\n          userOut.key = cachedId;\n          return userOut;\n        } else {\n          const id = uuidv1();\n          userOut.key = id;\n          return setCachedUserId(id).then(() => userOut);\n        }\n      });\n    } else {\n      return Promise.reject(new errors.LDInvalidUserError(messages.invalidUser()));\n    }\n  };\n\n  return ret;\n}\n","import * as errors from './errors';\nimport * as messages from './messages';\nimport * as utils from './utils';\n\n// baseOptionDefs should contain an entry for each supported configuration option in the common package.\n// Each entry can have three properties:\n// - \"default\": the default value if any\n// - \"type\": a type constraint used if the type can't be inferred from the default value). The allowable\n//   values are \"boolean\", \"string\", \"number\", \"array\", \"object\", \"function\", or several of these OR'd\n//   together with \"|\" (\"function|object\").\n// - \"minimum\": minimum value if any for numeric properties\n//\n// The extraOptionDefs parameter to validate() uses the same format.\nexport const baseOptionDefs = {\n  baseUrl: { default: 'https://app.launchdarkly.com' },\n  streamUrl: { default: 'https://clientstream.launchdarkly.com' },\n  eventsUrl: { default: 'https://events.launchdarkly.com' },\n  sendEvents: { default: true },\n  streaming: { type: 'boolean' }, // default for this is undefined, which is different from false\n  sendLDHeaders: { default: true },\n  inlineUsersInEvents: { default: false },\n  allowFrequentDuplicateEvents: { default: false },\n  sendEventsOnlyForVariation: { default: false },\n  useReport: { default: false },\n  evaluationReasons: { default: false },\n  eventCapacity: { default: 100, minimum: 1 },\n  flushInterval: { default: 2000, minimum: 2000 },\n  samplingInterval: { default: 0, minimum: 0 },\n  streamReconnectDelay: { default: 1000, minimum: 0 },\n  allAttributesPrivate: { default: false },\n  privateAttributeNames: { default: [] },\n  bootstrap: { type: 'string|object' },\n  diagnosticRecordingInterval: { default: 900000, minimum: 2000 },\n  diagnosticOptOut: { default: false },\n  wrapperName: { type: 'string' },\n  wrapperVersion: { type: 'string' },\n  stateProvider: { type: 'object' }, // not a public option, used internally\n};\n\nexport function validate(options, emitter, extraOptionDefs, logger) {\n  const optionDefs = utils.extend({ logger: { default: logger } }, baseOptionDefs, extraOptionDefs);\n\n  const deprecatedOptions = {\n    // eslint-disable-next-line camelcase\n    all_attributes_private: 'allAttributesPrivate',\n    // eslint-disable-next-line camelcase\n    private_attribute_names: 'privateAttributeNames',\n    samplingInterval: null,\n  };\n\n  function checkDeprecatedOptions(config) {\n    const opts = config;\n    Object.keys(deprecatedOptions).forEach(oldName => {\n      if (opts[oldName] !== undefined) {\n        const newName = deprecatedOptions[oldName];\n        logger && logger.warn(messages.deprecated(oldName, newName));\n        if (newName) {\n          if (opts[newName] === undefined) {\n            opts[newName] = opts[oldName];\n          }\n          delete opts[oldName];\n        }\n      }\n    });\n  }\n\n  function applyDefaults(config) {\n    // This works differently from utils.extend() in that it *will not* override a default value\n    // if the provided value is explicitly set to null. This provides backward compatibility\n    // since in the past we only used the provided values if they were truthy.\n    const ret = utils.extend({}, config);\n    Object.keys(optionDefs).forEach(name => {\n      if (ret[name] === undefined || ret[name] === null) {\n        ret[name] = optionDefs[name] && optionDefs[name].default;\n      }\n    });\n    return ret;\n  }\n\n  function validateTypesAndNames(config) {\n    const ret = utils.extend({}, config);\n    const typeDescForValue = value => {\n      if (value === null) {\n        return 'any';\n      }\n      if (value === undefined) {\n        return undefined;\n      }\n      if (Array.isArray(value)) {\n        return 'array';\n      }\n      const t = typeof value;\n      if (t === 'boolean' || t === 'string' || t === 'number' || t === 'function') {\n        return t;\n      }\n      return 'object';\n    };\n    Object.keys(config).forEach(name => {\n      const value = config[name];\n      if (value !== null && value !== undefined) {\n        const optionDef = optionDefs[name];\n        if (optionDef === undefined) {\n          reportArgumentError(messages.unknownOption(name));\n        } else {\n          const expectedType = optionDef.type || typeDescForValue(optionDef.default);\n          if (expectedType !== 'any') {\n            const allowedTypes = expectedType.split('|');\n            const actualType = typeDescForValue(value);\n            if (allowedTypes.indexOf(actualType) < 0) {\n              if (expectedType === 'boolean') {\n                ret[name] = !!value;\n                reportArgumentError(messages.wrongOptionTypeBoolean(name, actualType));\n              } else {\n                reportArgumentError(messages.wrongOptionType(name, expectedType, actualType));\n                ret[name] = optionDef.default;\n              }\n            } else {\n              if (actualType === 'number' && optionDef.minimum !== undefined && value < optionDef.minimum) {\n                reportArgumentError(messages.optionBelowMinimum(name, value, optionDef.minimum));\n                ret[name] = optionDef.minimum;\n              }\n            }\n          }\n        }\n      }\n    });\n    return ret;\n  }\n\n  function reportArgumentError(message) {\n    utils.onNextTick(() => {\n      emitter && emitter.maybeReportError(new errors.LDInvalidArgumentError(message));\n    });\n  }\n\n  let config = utils.extend({}, options || {});\n\n  checkDeprecatedOptions(config);\n\n  config = applyDefaults(config);\n  config = validateTypesAndNames(config);\n\n  return config;\n}\n","const uuidv1 = require('uuid/v1');\n// Note that in the diagnostic events spec, these IDs are to be generated with UUID v4. However,\n// in JS we were already using v1 for unique user keys, so to avoid bringing in two packages we\n// will use v1 here as well.\n\nconst { baseOptionDefs } = require('./configuration');\nconst messages = require('./messages');\n\nfunction DiagnosticId(sdkKey) {\n  const ret = {\n    diagnosticId: uuidv1(),\n  };\n  if (sdkKey) {\n    ret.sdkKeySuffix = sdkKey.length > 6 ? sdkKey.substring(sdkKey.length - 6) : sdkKey;\n  }\n  return ret;\n}\n\n// A stateful object holding statistics that will go into diagnostic events.\n\nfunction DiagnosticsAccumulator(startTime) {\n  let dataSinceDate, droppedEvents, eventsInLastBatch, streamInits;\n\n  function reset(time) {\n    dataSinceDate = time;\n    droppedEvents = 0;\n    eventsInLastBatch = 0;\n    streamInits = [];\n  }\n\n  reset(startTime);\n\n  return {\n    getProps: () => ({\n      dataSinceDate,\n      droppedEvents,\n      eventsInLastBatch,\n      streamInits,\n      // omit deduplicatedUsers for the JS SDKs because they don't deduplicate users\n    }),\n    setProps: props => {\n      dataSinceDate = props.dataSinceDate;\n      droppedEvents = props.droppedEvents || 0;\n      eventsInLastBatch = props.eventsInLastBatch || 0;\n      streamInits = props.streamInits || [];\n    },\n    incrementDroppedEvents: () => {\n      droppedEvents++;\n    },\n    setEventsInLastBatch: n => {\n      eventsInLastBatch = n;\n    },\n    recordStreamInit: (timestamp, failed, durationMillis) => {\n      const info = { timestamp, failed, durationMillis };\n      streamInits.push(info);\n    },\n    reset,\n  };\n}\n\n// An object that maintains information that will go into diagnostic events, and knows how to format\n// those events. It is instantiated by the SDK client, and shared with the event processor.\n//\n// The JS-based SDKs have two modes for diagnostic events. By default, the behavior is basically the\n// same as the server-side SDKs: a \"diagnostic-init\" event is sent on startup, and then \"diagnostic\"\n// events with operating statistics are sent periodically. However, in a browser environment this is\n// undesirable because the page may be reloaded frequently. In that case, setting the property\n// \"platform.diagnosticUseCombinedEvent\" to true enables an alternate mode in which a combination of\n// both kinds of event is sent at intervals, relative to the last time this was done (if any) which\n// is cached in local storage.\n\nfunction DiagnosticsManager(platform, accumulator, eventSender, environmentId, config, diagnosticId) {\n  const combinedMode = !!platform.diagnosticUseCombinedEvent;\n  const localStorageKey = 'ld:' + environmentId + ':$diagnostics';\n  const diagnosticEventsUrl = config.eventsUrl + '/events/diagnostic/' + environmentId;\n  const periodicInterval = config.diagnosticRecordingInterval;\n  const acc = accumulator;\n  const initialEventSamplingInterval = 4; // used only in combined mode - see start()\n  let streamingEnabled = !!config.streaming;\n  let eventSentTime;\n  let periodicTimer;\n  const manager = {};\n\n  function makeInitProperties() {\n    return {\n      sdk: makeSdkData(),\n      configuration: makeConfigData(),\n      platform: platform.diagnosticPlatformData,\n    };\n  }\n\n  // Send a diagnostic event and do not wait for completion.\n  function sendDiagnosticEvent(event) {\n    config.logger && config.logger.debug(messages.debugPostingDiagnosticEvent(event));\n    eventSender\n      .sendEvents(event, diagnosticEventsUrl, true)\n      .then(() => undefined)\n      .catch(() => undefined);\n  }\n\n  function loadProperties(callback) {\n    if (!platform.localStorage) {\n      return callback(false); // false indicates that local storage is not available\n    }\n    platform.localStorage\n      .get(localStorageKey)\n      .then(data => {\n        if (data) {\n          try {\n            const props = JSON.parse(data);\n            acc.setProps(props);\n            eventSentTime = props.dataSinceDate;\n          } catch (e) {\n            // disregard malformed cached data\n          }\n        }\n        callback(true);\n      })\n      .catch(() => {\n        callback(false);\n      });\n  }\n\n  function saveProperties() {\n    if (platform.localStorage) {\n      const props = { ...acc.getProps() };\n      platform.localStorage.set(localStorageKey, JSON.stringify(props), () => {});\n    }\n  }\n\n  // Creates the initial event that is sent by the event processor when the SDK starts up. This will not\n  // be repeated during the lifetime of the SDK client. In combined mode, we don't send this.\n  function createInitEvent() {\n    return {\n      kind: 'diagnostic-init',\n      id: diagnosticId,\n      creationDate: acc.getProps().dataSinceDate,\n      ...makeInitProperties(),\n    };\n  }\n\n  // Creates a periodic event containing time-dependent stats, and resets the state of the manager with\n  // regard to those stats. In combined mode (browser SDK) this also contains the configuration data.\n  function createPeriodicEventAndReset() {\n    const currentTime = new Date().getTime();\n    let ret = {\n      kind: combinedMode ? 'diagnostic-combined' : 'diagnostic',\n      id: diagnosticId,\n      creationDate: currentTime,\n      ...acc.getProps(),\n    };\n    if (combinedMode) {\n      ret = { ...ret, ...makeInitProperties() };\n    }\n    acc.reset(currentTime);\n    return ret;\n  }\n\n  function sendPeriodicEvent() {\n    sendDiagnosticEvent(createPeriodicEventAndReset());\n    periodicTimer = setTimeout(sendPeriodicEvent, periodicInterval);\n    eventSentTime = new Date().getTime();\n    if (combinedMode) {\n      saveProperties();\n    }\n  }\n\n  function makeSdkData() {\n    const sdkData = { ...platform.diagnosticSdkData };\n    if (config.wrapperName) {\n      sdkData.wrapperName = config.wrapperName;\n    }\n    if (config.wrapperVersion) {\n      sdkData.wrapperVersion = config.wrapperVersion;\n    }\n    return sdkData;\n  }\n\n  function makeConfigData() {\n    const configData = {\n      customBaseURI: config.baseUrl !== baseOptionDefs.baseUrl.default,\n      customStreamURI: config.streamUrl !== baseOptionDefs.streamUrl.default,\n      customEventsURI: config.eventsUrl !== baseOptionDefs.eventsUrl.default,\n      eventsCapacity: config.eventCapacity,\n      eventsFlushIntervalMillis: config.flushInterval,\n      reconnectTimeMillis: config.streamReconnectDelay,\n      streamingDisabled: !streamingEnabled,\n      allAttributesPrivate: !!config.allAttributesPrivate,\n      inlineUsersInEvents: !!config.inlineUsersInEvents,\n      diagnosticRecordingIntervalMillis: config.diagnosticRecordingInterval,\n      // The following extra properties are only provided by client-side JS SDKs:\n      usingSecureMode: !!config.hash,\n      bootstrapMode: !!config.bootstrap,\n      fetchGoalsDisabled: !config.fetchGoals,\n      allowFrequentDuplicateEvents: !!config.allowFrequentDuplicateEvents,\n      sendEventsOnlyForVariation: !!config.sendEventsOnlyForVariation,\n    };\n    // Client-side JS SDKs do not have the following properties which other SDKs have:\n    // connectTimeoutMillis\n    // pollingIntervalMillis\n    // samplingInterval\n    // socketTimeoutMillis\n    // startWaitMillis\n    // userKeysCapacity\n    // userKeysFlushIntervalMillis\n    // usingProxy\n    // usingProxyAuthenticator\n    // usingRelayDaemon\n\n    return configData;\n  }\n\n  // Called when the SDK is starting up. Either send an init event immediately, or, in the alternate\n  // mode, check for cached local storage properties and send an event only if we haven't done so\n  // recently.\n  manager.start = () => {\n    if (combinedMode) {\n      loadProperties(localStorageAvailable => {\n        if (localStorageAvailable) {\n          const nextEventTime = (eventSentTime || 0) + periodicInterval;\n          const timeNow = new Date().getTime();\n          if (timeNow >= nextEventTime) {\n            sendPeriodicEvent();\n          } else {\n            periodicTimer = setTimeout(sendPeriodicEvent, nextEventTime - timeNow);\n          }\n        } else {\n          // We don't have the ability to cache anything in local storage, so we don't know if we\n          // recently sent an event before this page load, but we would still prefer not to send one\n          // on *every* page load. So, as a rough heuristic, we'll decide semi-randomly.\n          if (Math.floor(Math.random() * initialEventSamplingInterval) === 0) {\n            sendPeriodicEvent();\n          } else {\n            periodicTimer = setTimeout(sendPeriodicEvent, periodicInterval);\n          }\n        }\n      });\n    } else {\n      sendDiagnosticEvent(createInitEvent());\n      periodicTimer = setTimeout(sendPeriodicEvent, periodicInterval);\n    }\n  };\n\n  manager.stop = () => {\n    periodicTimer && clearTimeout(periodicTimer);\n  };\n\n  // Called when streaming mode is turned on or off dynamically.\n  manager.setStreaming = enabled => {\n    streamingEnabled = enabled;\n  };\n\n  return manager;\n}\n\nmodule.exports = {\n  DiagnosticId,\n  DiagnosticsAccumulator,\n  DiagnosticsManager,\n};\n","// Default implementation of our internal logging interface, which writes messages to the console.\n// If no minimum level is specified, all messages will be logged. Setting the level to \"none\"\n// disables all logging.\n\nexport default function createConsoleLogger(level, maybePrefix) {\n  const allLevels = ['debug', 'info', 'warn', 'error'];\n  let prefix;\n  if (maybePrefix !== null && maybePrefix !== undefined) {\n    prefix = maybePrefix === '' ? '' : maybePrefix + ' ';\n  } else {\n    prefix = 'LD: ';\n  }\n  let minLevelIndex = 0;\n  if (level) {\n    if (level === 'none') {\n      minLevelIndex = 100;\n    } else {\n      minLevelIndex = allLevels.indexOf(level);\n    }\n  }\n\n  const logger = {};\n\n  function log(levelIndex, outputFn, msg) {\n    if (levelIndex >= minLevelIndex) {\n      const levelName = levelIndex < allLevels.length ? allLevels[levelIndex] : '?';\n      outputFn(prefix + '[' + levelName + '] ' + msg);\n    }\n  }\n\n  logger.debug = msg => log(0, console.log, msg); // eslint-disable-line no-console\n  logger.info = msg => log(1, console.info, msg); // eslint-disable-line no-console\n  logger.warn = msg => log(2, console.warn, msg); // eslint-disable-line no-console\n  logger.error = msg => log(3, console.error, msg); // eslint-disable-line no-console\n\n  return logger;\n}\n","import EventProcessor from './EventProcessor';\nimport EventEmitter from './EventEmitter';\nimport EventSender from './EventSender';\nimport InitializationStateTracker from './InitializationState';\nimport Store from './Store';\nimport Stream from './Stream';\nimport Requestor from './Requestor';\nimport Identity from './Identity';\nimport UserValidator from './UserValidator';\nimport * as configuration from './configuration';\nimport * as diagnostics from './diagnosticEvents';\nimport createConsoleLogger from './consoleLogger';\nimport * as utils from './utils';\nimport * as errors from './errors';\nimport * as messages from './messages';\n\nconst changeEvent = 'change';\nconst internalChangeEvent = 'internal-change';\n\n// This is called by the per-platform initialize functions to create the base client object that we\n// may also extend with additional behavior. It returns an object with these properties:\n//   client: the actual client object\n//   options: the configuration (after any appropriate defaults have been applied)\n// If we need to give the platform-specific clients access to any internals here, we should add those\n// as properties of the return object, not public properties of the client.\n//\n// For definitions of the API in the platform object, see stubPlatform.js in the test code.\n\nexport function initialize(env, user, specifiedOptions, platform, extraOptionDefs) {\n  const logger = createLogger();\n  const emitter = EventEmitter(logger);\n  const initializationStateTracker = InitializationStateTracker(emitter);\n  const options = configuration.validate(specifiedOptions, emitter, extraOptionDefs, logger);\n  const sendEvents = options.sendEvents;\n  let environment = env;\n  let hash = options.hash;\n\n  const eventSender = EventSender(platform, environment, options);\n\n  const diagnosticsEnabled = options.sendEvents && !options.diagnosticOptOut;\n  const diagnosticId = diagnosticsEnabled ? diagnostics.DiagnosticId(environment) : null;\n  const diagnosticsAccumulator = diagnosticsEnabled ? diagnostics.DiagnosticsAccumulator(new Date().getTime()) : null;\n  const diagnosticsManager = diagnosticsEnabled\n    ? diagnostics.DiagnosticsManager(platform, diagnosticsAccumulator, eventSender, environment, options, diagnosticId)\n    : null;\n  if (diagnosticsManager) {\n    diagnosticsManager.start();\n  }\n\n  const stream = Stream(platform, options, environment, diagnosticsAccumulator);\n\n  const events =\n    options.eventProcessor ||\n    EventProcessor(platform, options, environment, diagnosticsAccumulator, emitter, eventSender);\n\n  const requestor = Requestor(platform, options, environment);\n\n  const seenRequests = {};\n  let flags = {};\n  let useLocalStorage;\n  let streamActive;\n  let streamForcedState = options.streaming;\n  let subscribedToChangeEvents;\n  let inited = false;\n  let closed = false;\n  let firstEvent = true;\n\n  // The \"stateProvider\" object is used in the Electron SDK, to allow one client instance to take partial\n  // control of another. If present, it has the following contract:\n  // - getInitialState() returns the initial client state if it is already available. The state is an\n  //   object whose properties are \"environment\", \"user\", and \"flags\".\n  // - on(\"init\", listener) triggers an event when the initial client state becomes available, passing\n  //   the state object to the listener.\n  // - on(\"update\", listener) triggers an event when flag values change and/or the current user changes.\n  //   The parameter is an object that *may* contain \"user\" and/or \"flags\".\n  // - enqueueEvent(event) accepts an analytics event object and returns true if the stateProvider will\n  //   be responsible for delivering it, or false if we still should deliver it ourselves.\n  const stateProvider = options.stateProvider;\n\n  const ident = Identity(null, sendIdentifyEvent);\n  const userValidator = UserValidator(platform.localStorage, logger);\n  let store;\n  if (platform.localStorage) {\n    store = new Store(platform.localStorage, environment, hash, ident, logger);\n  }\n\n  function createLogger() {\n    if (specifiedOptions && specifiedOptions.logger) {\n      return specifiedOptions.logger;\n    }\n    return (extraOptionDefs && extraOptionDefs.logger && extraOptionDefs.logger.default) || createConsoleLogger('warn');\n  }\n\n  function readFlagsFromBootstrap(data) {\n    // If the bootstrap data came from an older server-side SDK, we'll have just a map of keys to values.\n    // Newer SDKs that have an allFlagsState method will provide an extra \"$flagsState\" key that contains\n    // the rest of the metadata we want. We do it this way for backward compatibility with older JS SDKs.\n    const keys = Object.keys(data);\n    const metadataKey = '$flagsState';\n    const validKey = '$valid';\n    const metadata = data[metadataKey];\n    if (!metadata && keys.length) {\n      logger.warn(messages.bootstrapOldFormat());\n    }\n    if (data[validKey] === false) {\n      logger.warn(messages.bootstrapInvalid());\n    }\n    const ret = {};\n    keys.forEach(key => {\n      if (key !== metadataKey && key !== validKey) {\n        let flag = { value: data[key] };\n        if (metadata && metadata[key]) {\n          flag = utils.extend(flag, metadata[key]);\n        } else {\n          flag.version = 0;\n        }\n        ret[key] = flag;\n      }\n    });\n    return ret;\n  }\n\n  function shouldEnqueueEvent() {\n    return sendEvents && !closed && !platform.isDoNotTrack();\n  }\n\n  function enqueueEvent(event) {\n    if (!environment) {\n      // We're in paired mode and haven't been initialized with an environment or user yet\n      return;\n    }\n    if (stateProvider && stateProvider.enqueueEvent && stateProvider.enqueueEvent(event)) {\n      return; // it'll be handled elsewhere\n    }\n    if (!event.user) {\n      if (firstEvent) {\n        logger.warn(messages.eventWithoutUser());\n        firstEvent = false;\n      }\n      return;\n    }\n    firstEvent = false;\n    if (shouldEnqueueEvent()) {\n      logger.debug(messages.debugEnqueueingEvent(event.kind));\n      events.enqueue(event);\n    }\n  }\n\n  function sendIdentifyEvent(user) {\n    if (stateProvider) {\n      // In paired mode, the other client is responsible for sending identify events\n      return;\n    }\n    if (user) {\n      enqueueEvent({\n        kind: 'identify',\n        key: user.key,\n        user: user,\n        creationDate: new Date().getTime(),\n      });\n    }\n  }\n\n  function sendFlagEvent(key, detail, defaultValue, includeReason) {\n    const user = ident.getUser();\n    const now = new Date();\n    const value = detail ? detail.value : null;\n    if (!options.allowFrequentDuplicateEvents) {\n      const cacheKey = JSON.stringify(value) + (user && user.key ? user.key : '') + key; // see below\n      const cached = seenRequests[cacheKey];\n      // cache TTL is five minutes\n      if (cached && now - cached < 300000) {\n        return;\n      }\n      seenRequests[cacheKey] = now;\n    }\n\n    const event = {\n      kind: 'feature',\n      key: key,\n      user: user,\n      value: value,\n      variation: detail ? detail.variationIndex : null,\n      default: defaultValue,\n      creationDate: now.getTime(),\n    };\n    const flag = flags[key];\n    if (flag) {\n      event.version = flag.flagVersion ? flag.flagVersion : flag.version;\n      event.trackEvents = flag.trackEvents;\n      event.debugEventsUntilDate = flag.debugEventsUntilDate;\n    }\n    if ((includeReason || (flag && flag.trackReason)) && detail) {\n      event.reason = detail.reason;\n    }\n\n    enqueueEvent(event);\n  }\n\n  function identify(user, newHash, onDone) {\n    if (closed) {\n      return utils.wrapPromiseCallback(Promise.resolve({}), onDone);\n    }\n    if (stateProvider) {\n      // We're being controlled by another client instance, so only that instance is allowed to change the user\n      logger.warn(messages.identifyDisabled());\n      return utils.wrapPromiseCallback(Promise.resolve(utils.transformVersionedValuesToValues(flags)), onDone);\n    }\n    const clearFirst = useLocalStorage && store ? store.clearFlags() : Promise.resolve();\n    return utils.wrapPromiseCallback(\n      clearFirst\n        .then(() => userValidator.validateUser(user))\n        .then(realUser =>\n          requestor\n            .fetchFlagSettings(realUser, newHash)\n            // the following then() is nested within this one so we can use realUser from the previous closure\n            .then(requestedFlags => {\n              const flagValueMap = utils.transformVersionedValuesToValues(requestedFlags);\n              ident.setUser(realUser);\n              hash = newHash;\n              if (requestedFlags) {\n                return replaceAllFlags(requestedFlags).then(() => flagValueMap);\n              } else {\n                return flagValueMap;\n              }\n            })\n        )\n        .then(flagValueMap => {\n          if (streamActive) {\n            connectStream();\n          }\n          return flagValueMap;\n        })\n        .catch(err => {\n          emitter.maybeReportError(err);\n          return Promise.reject(err);\n        }),\n      onDone\n    );\n  }\n\n  function getUser() {\n    return ident.getUser();\n  }\n\n  function flush(onDone) {\n    return utils.wrapPromiseCallback(sendEvents ? events.flush() : Promise.resolve(), onDone);\n  }\n\n  function variation(key, defaultValue) {\n    return variationDetailInternal(key, defaultValue, true, false).value;\n  }\n\n  function variationDetail(key, defaultValue) {\n    return variationDetailInternal(key, defaultValue, true, true);\n  }\n\n  function variationDetailInternal(key, defaultValue, sendEvent, includeReasonInEvent) {\n    let detail;\n\n    if (flags && utils.objectHasOwnProperty(flags, key) && flags[key] && !flags[key].deleted) {\n      const flag = flags[key];\n      detail = getFlagDetail(flag);\n      if (flag.value === null || flag.value === undefined) {\n        detail.value = defaultValue;\n      }\n    } else {\n      detail = { value: defaultValue, variationIndex: null, reason: { kind: 'ERROR', errorKind: 'FLAG_NOT_FOUND' } };\n    }\n\n    if (sendEvent) {\n      sendFlagEvent(key, detail, defaultValue, includeReasonInEvent);\n    }\n\n    return detail;\n  }\n\n  function getFlagDetail(flag) {\n    return {\n      value: flag.value,\n      variationIndex: flag.variation === undefined ? null : flag.variation,\n      reason: flag.reason || null,\n    };\n    // Note, the logic above ensures that variationIndex and reason will always be null rather than\n    // undefined if we don't have values for them. That's just to avoid subtle errors that depend on\n    // whether an object was JSON-encoded with null properties omitted or not.\n  }\n\n  function allFlags() {\n    const results = {};\n\n    if (!flags) {\n      return results;\n    }\n\n    for (const key in flags) {\n      if (utils.objectHasOwnProperty(flags, key)) {\n        results[key] = variationDetailInternal(key, null, !options.sendEventsOnlyForVariation).value;\n      }\n    }\n\n    return results;\n  }\n\n  function track(key, data, metricValue) {\n    if (typeof key !== 'string') {\n      emitter.maybeReportError(new errors.LDInvalidEventKeyError(messages.unknownCustomEventKey(key)));\n      return;\n    }\n\n    if (platform.customEventFilter && !platform.customEventFilter(key)) {\n      logger.warn(messages.unknownCustomEventKey(key));\n    }\n\n    const e = {\n      kind: 'custom',\n      key: key,\n      user: ident.getUser(),\n      url: platform.getCurrentUrl(),\n      creationDate: new Date().getTime(),\n    };\n    // Note, check specifically for null/undefined because it is legal to set these fields to a falsey value.\n    if (data !== null && data !== undefined) {\n      e.data = data;\n    }\n    if (metricValue !== null && metricValue !== undefined) {\n      e.metricValue = metricValue;\n    }\n    enqueueEvent(e);\n  }\n\n  function connectStream() {\n    streamActive = true;\n    if (!ident.getUser()) {\n      return;\n    }\n    stream.connect(ident.getUser(), hash, {\n      ping: function() {\n        logger.debug(messages.debugStreamPing());\n        requestor\n          .fetchFlagSettings(ident.getUser(), hash)\n          .then(requestedFlags => replaceAllFlags(requestedFlags || {}))\n          .catch(err => {\n            emitter.maybeReportError(new errors.LDFlagFetchError(messages.errorFetchingFlags(err)));\n          });\n      },\n      put: function(e) {\n        const data = JSON.parse(e.data);\n        logger.debug(messages.debugStreamPut());\n        replaceAllFlags(data); // don't wait for this Promise to be resolved\n      },\n      patch: function(e) {\n        const data = JSON.parse(e.data);\n        // If both the flag and the patch have a version property, then the patch version must be\n        // greater than the flag version for us to accept the patch.  If either one has no version\n        // then the patch always succeeds.\n        const oldFlag = flags[data.key];\n        if (!oldFlag || !oldFlag.version || !data.version || oldFlag.version < data.version) {\n          logger.debug(messages.debugStreamPatch(data.key));\n          const mods = {};\n          const newFlag = utils.extend({}, data);\n          delete newFlag['key'];\n          flags[data.key] = newFlag;\n          const newDetail = getFlagDetail(newFlag);\n          if (oldFlag) {\n            mods[data.key] = { previous: oldFlag.value, current: newDetail };\n          } else {\n            mods[data.key] = { current: newDetail };\n          }\n          handleFlagChanges(mods); // don't wait for this Promise to be resolved\n        } else {\n          logger.debug(messages.debugStreamPatchIgnored(data.key));\n        }\n      },\n      delete: function(e) {\n        const data = JSON.parse(e.data);\n        if (!flags[data.key] || flags[data.key].version < data.version) {\n          logger.debug(messages.debugStreamDelete(data.key));\n          const mods = {};\n          if (flags[data.key] && !flags[data.key].deleted) {\n            mods[data.key] = { previous: flags[data.key].value };\n          }\n          flags[data.key] = { version: data.version, deleted: true };\n          handleFlagChanges(mods); // don't wait for this Promise to be resolved\n        } else {\n          logger.debug(messages.debugStreamDeleteIgnored(data.key));\n        }\n      },\n    });\n  }\n\n  function disconnectStream() {\n    if (streamActive) {\n      stream.disconnect();\n      streamActive = false;\n    }\n  }\n\n  // Returns a Promise which will be resolved when we have completely updated the internal flags state,\n  // dispatched all change events, and updated local storage if appropriate. This Promise is guaranteed\n  // never to have an unhandled rejection.\n  function replaceAllFlags(newFlags) {\n    const changes = {};\n\n    if (!newFlags) {\n      return Promise.resolve();\n    }\n\n    for (const key in flags) {\n      if (utils.objectHasOwnProperty(flags, key) && flags[key]) {\n        if (newFlags[key] && !utils.deepEquals(newFlags[key].value, flags[key].value)) {\n          changes[key] = { previous: flags[key].value, current: getFlagDetail(newFlags[key]) };\n        } else if (!newFlags[key] || newFlags[key].deleted) {\n          changes[key] = { previous: flags[key].value };\n        }\n      }\n    }\n    for (const key in newFlags) {\n      if (utils.objectHasOwnProperty(newFlags, key) && newFlags[key] && (!flags[key] || flags[key].deleted)) {\n        changes[key] = { current: getFlagDetail(newFlags[key]) };\n      }\n    }\n\n    flags = { ...newFlags };\n    return handleFlagChanges(changes).catch(() => {}); // swallow any exceptions from this Promise\n  }\n\n  // Returns a Promise which will be resolved when we have dispatched all change events and updated\n  // local storage if appropriate.\n  function handleFlagChanges(changes) {\n    const keys = Object.keys(changes);\n\n    if (keys.length > 0) {\n      const changeEventParams = {};\n      keys.forEach(key => {\n        const current = changes[key].current;\n        const value = current ? current.value : undefined;\n        const previous = changes[key].previous;\n        emitter.emit(changeEvent + ':' + key, value, previous);\n        changeEventParams[key] = current ? { current: value, previous: previous } : { previous: previous };\n      });\n\n      emitter.emit(changeEvent, changeEventParams);\n      emitter.emit(internalChangeEvent, flags);\n\n      // By default, we send feature evaluation events whenever we have received new flag values -\n      // the client has in effect evaluated these flags just by receiving them. This can be suppressed\n      // by setting \"sendEventsOnlyForVariation\". Also, if we have a stateProvider, we don't send these\n      // events because we assume they have already been sent by the other client that gave us the flags\n      // (when it received them in the first place).\n      if (!options.sendEventsOnlyForVariation && !stateProvider) {\n        keys.forEach(key => {\n          sendFlagEvent(key, changes[key].current);\n        });\n      }\n    }\n\n    if (useLocalStorage && store) {\n      return store.saveFlags(flags).catch(() => null); // disregard errors\n    } else {\n      return Promise.resolve();\n    }\n  }\n\n  function on(event, handler, context) {\n    if (isChangeEventKey(event)) {\n      subscribedToChangeEvents = true;\n      if (inited) {\n        updateStreamingState();\n      }\n      emitter.on(event, handler, context);\n    } else {\n      emitter.on(...arguments);\n    }\n  }\n\n  function off(event) {\n    emitter.off(...arguments);\n    if (isChangeEventKey(event)) {\n      let haveListeners = false;\n      emitter.getEvents().forEach(key => {\n        if (isChangeEventKey(key) && emitter.getEventListenerCount(key) > 0) {\n          haveListeners = true;\n        }\n      });\n      if (!haveListeners) {\n        subscribedToChangeEvents = false;\n        if (streamActive && streamForcedState === undefined) {\n          disconnectStream();\n        }\n      }\n    }\n  }\n\n  function setStreaming(state) {\n    const newState = state === null ? undefined : state;\n    if (newState !== streamForcedState) {\n      streamForcedState = newState;\n      updateStreamingState();\n    }\n  }\n\n  function updateStreamingState() {\n    const shouldBeStreaming = streamForcedState || (subscribedToChangeEvents && streamForcedState === undefined);\n    if (shouldBeStreaming && !streamActive) {\n      connectStream();\n    } else if (!shouldBeStreaming && streamActive) {\n      disconnectStream();\n    }\n    if (diagnosticsManager) {\n      diagnosticsManager.setStreaming(shouldBeStreaming);\n    }\n  }\n\n  function isChangeEventKey(event) {\n    return event === changeEvent || event.substr(0, changeEvent.length + 1) === changeEvent + ':';\n  }\n\n  if (typeof options.bootstrap === 'string' && options.bootstrap.toUpperCase() === 'LOCALSTORAGE') {\n    if (store) {\n      useLocalStorage = true;\n    } else {\n      logger.warn(messages.localStorageUnavailable());\n    }\n  }\n\n  if (typeof options.bootstrap === 'object') {\n    // Set the flags as soon as possible before we get into any async code, so application code can read\n    // them even if the ready event has not yet fired.\n    flags = readFlagsFromBootstrap(options.bootstrap);\n  }\n\n  if (stateProvider) {\n    // The stateProvider option is used in the Electron SDK, to allow a client instance in the main process\n    // to control another client instance (i.e. this one) in the renderer process. We can't predict which\n    // one will start up first, so the initial state may already be available for us or we may have to wait\n    // to receive it.\n    const state = stateProvider.getInitialState();\n    if (state) {\n      initFromStateProvider(state);\n    } else {\n      stateProvider.on('init', initFromStateProvider);\n    }\n    stateProvider.on('update', updateFromStateProvider);\n  } else {\n    finishInit().catch(signalFailedInit);\n  }\n\n  function finishInit() {\n    if (!env) {\n      return Promise.reject(new errors.LDInvalidEnvironmentIdError(messages.environmentNotSpecified()));\n    }\n    return userValidator.validateUser(user).then(realUser => {\n      ident.setUser(realUser);\n      if (typeof options.bootstrap === 'object') {\n        // flags have already been set earlier\n        return signalSuccessfulInit();\n      } else if (useLocalStorage) {\n        return finishInitWithLocalStorage();\n      } else {\n        return finishInitWithPolling();\n      }\n    });\n  }\n\n  function finishInitWithLocalStorage() {\n    return store\n      .loadFlags()\n      .catch(() => null) // treat an error the same as if no flags were available\n      .then(storedFlags => {\n        if (storedFlags === null || storedFlags === undefined) {\n          flags = {};\n          return requestor\n            .fetchFlagSettings(ident.getUser(), hash)\n            .then(requestedFlags => replaceAllFlags(requestedFlags || {}))\n            .then(signalSuccessfulInit)\n            .catch(err => {\n              const initErr = new errors.LDFlagFetchError(messages.errorFetchingFlags(err));\n              signalFailedInit(initErr);\n            });\n        } else {\n          // We're reading the flags from local storage. Signal that we're ready,\n          // then update localStorage for the next page load. We won't signal changes or update\n          // the in-memory flags unless you subscribe for changes\n          flags = storedFlags;\n          utils.onNextTick(signalSuccessfulInit);\n\n          return requestor\n            .fetchFlagSettings(ident.getUser(), hash)\n            .then(requestedFlags => replaceAllFlags(requestedFlags))\n            .catch(err => emitter.maybeReportError(err));\n        }\n      });\n  }\n\n  function finishInitWithPolling() {\n    return requestor\n      .fetchFlagSettings(ident.getUser(), hash)\n      .then(requestedFlags => {\n        flags = requestedFlags || {};\n        // Note, we don't need to call updateSettings here because local storage and change events are not relevant\n        signalSuccessfulInit();\n      })\n      .catch(err => {\n        flags = {};\n        signalFailedInit(err);\n      });\n  }\n\n  function initFromStateProvider(state) {\n    environment = state.environment;\n    ident.setUser(state.user);\n    flags = { ...state.flags };\n    utils.onNextTick(signalSuccessfulInit);\n  }\n\n  function updateFromStateProvider(state) {\n    if (state.user) {\n      ident.setUser(state.user);\n    }\n    if (state.flags) {\n      replaceAllFlags(state.flags); // don't wait for this Promise to be resolved\n    }\n  }\n\n  function signalSuccessfulInit() {\n    logger.info(messages.clientInitialized());\n    inited = true;\n    updateStreamingState();\n    initializationStateTracker.signalSuccess();\n  }\n\n  function signalFailedInit(err) {\n    initializationStateTracker.signalFailure(err);\n  }\n\n  function start() {\n    if (sendEvents) {\n      if (diagnosticsManager) {\n        diagnosticsManager.start();\n      }\n      events.start();\n    }\n  }\n\n  function close(onDone) {\n    if (closed) {\n      return utils.wrapPromiseCallback(Promise.resolve(), onDone);\n    }\n    const finishClose = () => {\n      closed = true;\n      flags = {};\n    };\n    const p = Promise.resolve()\n      .then(() => {\n        disconnectStream();\n        if (diagnosticsManager) {\n          diagnosticsManager.stop();\n        }\n        if (sendEvents) {\n          events.stop();\n          return events.flush();\n        }\n      })\n      .then(finishClose)\n      .catch(finishClose);\n    return utils.wrapPromiseCallback(p, onDone);\n  }\n\n  function getFlagsInternal() {\n    // used by Electron integration\n    return flags;\n  }\n\n  const client = {\n    waitForInitialization: () => initializationStateTracker.getInitializationPromise(),\n    waitUntilReady: () => initializationStateTracker.getReadyPromise(),\n    identify: identify,\n    getUser: getUser,\n    variation: variation,\n    variationDetail: variationDetail,\n    track: track,\n    on: on,\n    off: off,\n    setStreaming: setStreaming,\n    flush: flush,\n    allFlags: allFlags,\n    close: close,\n  };\n\n  return {\n    client: client, // The client object containing all public methods.\n    options: options, // The validated configuration object, including all defaults.\n    emitter: emitter, // The event emitter which can be used to log errors or trigger events.\n    ident: ident, // The Identity object that manages the current user.\n    logger: logger, // The logging abstraction.\n    requestor: requestor, // The Requestor object.\n    start: start, // Starts the client once the environment is ready.\n    enqueueEvent: enqueueEvent, // Puts an analytics event in the queue, if event sending is enabled.\n    getFlagsInternal: getFlagsInternal, // Returns flag data structure with all details.\n    getEnvironmentId: () => environment, // Gets the environment ID (this may have changed since initialization, if we have a state provider)\n    internalChangeEventName: internalChangeEvent, // This event is triggered whenever we have new flag state.\n  };\n}\n\nexport const version = VERSION;\nexport { createConsoleLogger };\nexport { errors };\nexport { messages };\nexport { utils };\n","import EventSender from './EventSender';\nimport EventSummarizer from './EventSummarizer';\nimport UserFilter from './UserFilter';\nimport * as errors from './errors';\nimport * as messages from './messages';\nimport * as utils from './utils';\n\nexport default function EventProcessor(\n  platform,\n  options,\n  environmentId,\n  diagnosticsAccumulator = null,\n  emitter = null,\n  sender = null\n) {\n  const processor = {};\n  const eventSender = sender || EventSender(platform, environmentId, options);\n  const mainEventsUrl = options.eventsUrl + '/events/bulk/' + environmentId;\n  const summarizer = EventSummarizer();\n  const userFilter = UserFilter(options);\n  const inlineUsers = options.inlineUsersInEvents;\n  const samplingInterval = options.samplingInterval;\n  const eventCapacity = options.eventCapacity;\n  const flushInterval = options.flushInterval;\n  const logger = options.logger;\n  let queue = [];\n  let lastKnownPastTime = 0;\n  let disabled = false;\n  let exceededCapacity = false;\n  let flushTimer;\n\n  function shouldSampleEvent() {\n    return samplingInterval === 0 || Math.floor(Math.random() * samplingInterval) === 0;\n  }\n\n  function shouldDebugEvent(e) {\n    if (e.debugEventsUntilDate) {\n      // The \"last known past time\" comes from the last HTTP response we got from the server.\n      // In case the client's time is set wrong, at least we know that any expiration date\n      // earlier than that point is definitely in the past.  If there's any discrepancy, we\n      // want to err on the side of cutting off event debugging sooner.\n      return e.debugEventsUntilDate > lastKnownPastTime && e.debugEventsUntilDate > new Date().getTime();\n    }\n    return false;\n  }\n\n  // Transform an event from its internal format to the format we use when sending a payload.\n  function makeOutputEvent(e) {\n    const ret = utils.extend({}, e);\n    if (inlineUsers || e.kind === 'identify') {\n      // identify events always have an inline user\n      ret.user = userFilter.filterUser(e.user);\n    } else {\n      ret.userKey = e.user.key;\n      delete ret['user'];\n    }\n    if (e.kind === 'feature') {\n      delete ret['trackEvents'];\n      delete ret['debugEventsUntilDate'];\n    }\n    return ret;\n  }\n\n  function addToOutbox(event) {\n    if (queue.length < eventCapacity) {\n      queue.push(event);\n      exceededCapacity = false;\n    } else {\n      if (!exceededCapacity) {\n        exceededCapacity = true;\n        logger.warn(messages.eventCapacityExceeded());\n      }\n      if (diagnosticsAccumulator) {\n        // For diagnostic events, we track how many times we had to drop an event due to exceeding the capacity.\n        diagnosticsAccumulator.incrementDroppedEvents();\n      }\n    }\n  }\n\n  processor.enqueue = function(event) {\n    if (disabled) {\n      return;\n    }\n    let addFullEvent = false;\n    let addDebugEvent = false;\n\n    // Add event to the summary counters if appropriate\n    summarizer.summarizeEvent(event);\n\n    // Decide whether to add the event to the payload. Feature events may be added twice, once for\n    // the event (if tracked) and once for debugging.\n    if (event.kind === 'feature') {\n      if (shouldSampleEvent()) {\n        addFullEvent = !!event.trackEvents;\n        addDebugEvent = shouldDebugEvent(event);\n      }\n    } else {\n      addFullEvent = shouldSampleEvent();\n    }\n\n    if (addFullEvent) {\n      addToOutbox(makeOutputEvent(event));\n    }\n    if (addDebugEvent) {\n      const debugEvent = utils.extend({}, event, { kind: 'debug' });\n      delete debugEvent['trackEvents'];\n      delete debugEvent['debugEventsUntilDate'];\n      delete debugEvent['variation'];\n      addToOutbox(debugEvent);\n    }\n  };\n\n  processor.flush = function() {\n    if (disabled) {\n      return Promise.resolve();\n    }\n    const eventsToSend = queue;\n    const summary = summarizer.getSummary();\n    summarizer.clearSummary();\n    if (summary) {\n      summary.kind = 'summary';\n      eventsToSend.push(summary);\n    }\n    if (diagnosticsAccumulator) {\n      // For diagnostic events, we record how many events were in the queue at the last flush (since \"how\n      // many events happened to be in the queue at the moment we decided to send a diagnostic event\" would\n      // not be a very useful statistic).\n      diagnosticsAccumulator.setEventsInLastBatch(eventsToSend.length);\n    }\n    if (eventsToSend.length === 0) {\n      return Promise.resolve();\n    }\n    queue = [];\n    logger.debug(messages.debugPostingEvents(eventsToSend.length));\n    return eventSender.sendEvents(eventsToSend, mainEventsUrl).then(responseInfo => {\n      if (responseInfo) {\n        if (responseInfo.serverTime) {\n          lastKnownPastTime = responseInfo.serverTime;\n        }\n        if (!errors.isHttpErrorRecoverable(responseInfo.status)) {\n          disabled = true;\n        }\n        if (responseInfo.status >= 400) {\n          utils.onNextTick(() => {\n            emitter.maybeReportError(\n              new errors.LDUnexpectedResponseError(\n                messages.httpErrorMessage(responseInfo.status, 'event posting', 'some events were dropped')\n              )\n            );\n          });\n        }\n      }\n    });\n  };\n\n  processor.start = function() {\n    const flushTick = () => {\n      processor.flush();\n      flushTimer = setTimeout(flushTick, flushInterval);\n    };\n    flushTimer = setTimeout(flushTick, flushInterval);\n  };\n\n  processor.stop = function() {\n    clearTimeout(flushTimer);\n  };\n\n  return processor;\n}\n","import * as utils from './utils';\n\nexport default function Identity(initialUser, onChange) {\n  const ident = {};\n  let user;\n\n  ident.setUser = function(u) {\n    user = utils.sanitizeUser(u);\n    if (user && onChange) {\n      onChange(utils.clone(user));\n    }\n  };\n\n  ident.getUser = function() {\n    return user ? utils.clone(user) : null;\n  };\n\n  if (initialUser) {\n    ident.setUser(initialUser);\n  }\n\n  return ident;\n}\n"],"names":["createCustomError","name","CustomError","message","code","Error","captureStackTrace","this","constructor","prototype","LDUnexpectedResponseError","LDInvalidEnvironmentIdError","LDInvalidUserError","LDInvalidEventKeyError","LDInvalidArgumentError","LDFlagFetchError","isHttpErrorRecoverable","status","uint8","tmp","len","length","extraBytes","parts","i","len2","push","encodeChunk","lookup","join","revLookup","charCodeAt","start","end","num","output","isArray","Array","keyList","Object","keys","hasProp","hasOwnProperty","userAttrsToStringify","btoa","s","escaped","unescape","encodeURIComponent","base64","b","stringToBytes","base64URLEncode","replace","clone","obj","JSON","parse","stringify","deepEquals","a","equal","key","arrA","arrB","dateA","Date","dateB","getTime","regexpA","RegExp","regexpB","toString","call","fastDeepEqual","onNextTick","cb","setTimeout","wrapPromiseCallback","promise","callback","ret","then","value","error","Promise","reject","undefined","transformValuesToVersionedValues","flags","objectHasOwnProperty","version","transformVersionedValuesToValues","flagsState","chunkUserEventsForUrl","maxLength","events","chunk","allEvents","slice","allChunks","remainingSpace","event","shift","unshift","getLDUserAgentString","platform","userAgent","getLDHeaders","options","sendLDHeaders","h","wrapperName","wrapperVersion","extend","objects","reduce","acc","object","sanitizeUser","user","newUser","attr","String","getRandomValues","crypto","bind","window","msCrypto","rnds8","Uint8Array","module","rnds","r","Math","random","byteToHex","substr","_nodeId","_clockseq","buf","offset","bth","_lastMSecs","_lastNSecs","node","clockseq","seedBytes","rng","msecs","nsecs","dt","tl","tmh","n","bytesToUuid","EventSender","environmentId","imageUrlPath","baseHeaders","utils","httpFallbackPing","sender","sendChunk","url","isDiagnostic","usePost","jsonBody","payloadId","uuidv1","doPostRequest","canRetry","headers","httpRequest","result","errors","dateStr","header","time","serverTime","getResponseInfo","catch","resolve","sendEvents","chunks","canPost","httpAllowsPost","results","all","EventSummarizer","es","startDate","endDate","counters","summarizeEvent","kind","counterKey","variation","counterVal","count","default","creationDate","getSummary","flagsOut","empty","c","flag","counterOut","unknown","features","clearSummary","UserFilter","config","filter","allAttributesPrivate","privateAttributeNames","ignoreAttrs","custom","anonymous","allowedTopLevelAttrs","secondary","ip","country","email","firstName","lastName","avatar","filterUser","userPrivateAttrs","filterAttrs","props","isAttributeAllowed","indexOf","isPrivateAttr","filteredProps","removedAttrs","customResult","removedAttrNames","sort","privateAttrs","errorString","err","clientInitialized","docLink","eventCapacityExceeded","eventWithoutUser","invalidContentType","contentType","localStorageUnavailable","localStorageUnavailableForUserId","networkError","e","unknownCustomEventKey","environmentNotFound","environmentNotSpecified","errorFetchingFlags","userNotSpecified","invalidUser","bootstrapOldFormat","bootstrapInvalid","deprecated","oldName","newName","httpErrorMessage","context","retryMessage","httpUnavailable","identifyDisabled","streamClosing","streamConnecting","streamError","streamReconnectDelay","unknownOption","wrongOptionType","expectedType","actualType","wrongOptionTypeBoolean","optionBelowMinimum","minimum","debugPolling","debugStreamPing","debugStreamPut","debugStreamPatch","debugStreamPatchIgnored","debugStreamDelete","debugStreamDeleteIgnored","debugEnqueueingEvent","debugPostingEvents","EventEmitter","logger","emitter","on","handler","concat","off","emit","copiedHandlers","apply","arguments","getEvents","getEventListenerCount","maybeReportError","console","eventEmitter","succeeded","failed","failureValue","initializationPromise","readyPromise","onReady","getInitializationPromise","onSuccess","onFailure","getReadyPromise","signalSuccess","signalFailure","Store","localStorageProvider","environment","hash","ident","store","getFlagsKey","getUser","loadFlags","get","dataStr","data","schema","$schema","ex","clearFlags","warn","saveFlags","set","clear","Stream","diagnosticsAccumulator","connectionAttemptStartTime","baseUrl","streamUrl","stream","evalUrlPrefix","useReport","withReasons","evaluationReasons","firstConnectionErrorLogged","reconnectTimeoutReference","handlers","handleError","messages","logConnectionResult","closeConnection","tryConnect","delay","openConnection","query","eventSourceFactory","eventSourceAllowsReport","method","body","info","addEventListener","onerror","close","success","recordStreamInit","connect","newHash","newHandlers","disconnect","clearTimeout","isConnected","eventSourceIsActive","Requestor","requestor","activeRequests","fetchJSON","endpoint","coalescer","finallyFn","currentPromise","currentCancelFn","finalResolve","finalReject","p","cancelFn","resultPromise","promiseCoalescer","req","startsWith","statusText","getResponseError","addPromise","cancel","path","fetchFlagSettings","debug","UserValidator","validateUser","userOut","cachedId","id","setCachedUserId","baseOptionDefs","eventsUrl","streaming","type","inlineUsersInEvents","allowFrequentDuplicateEvents","sendEventsOnlyForVariation","eventCapacity","flushInterval","samplingInterval","bootstrap","diagnosticRecordingInterval","diagnosticOptOut","stateProvider","validate","extraOptionDefs","optionDefs","deprecatedOptions","all_attributes_private","private_attribute_names","reportArgumentError","opts","forEach","checkDeprecatedOptions","typeDescForValue","t","optionDef","allowedTypes","split","validateTypesAndNames","applyDefaults","sdkKey","diagnosticId","sdkKeySuffix","substring","startTime","dataSinceDate","droppedEvents","eventsInLastBatch","streamInits","reset","getProps","setProps","incrementDroppedEvents","setEventsInLastBatch","timestamp","durationMillis","accumulator","eventSender","eventSentTime","periodicTimer","combinedMode","diagnosticUseCombinedEvent","localStorageKey","diagnosticEventsUrl","periodicInterval","streamingEnabled","manager","makeInitProperties","sdk","makeSdkData","configuration","configData","customBaseURI","customStreamURI","customEventsURI","eventsCapacity","eventsFlushIntervalMillis","reconnectTimeMillis","streamingDisabled","diagnosticRecordingIntervalMillis","usingSecureMode","bootstrapMode","fetchGoalsDisabled","fetchGoals","diagnosticPlatformData","sendDiagnosticEvent","debugPostingDiagnosticEvent","sendPeriodicEvent","currentTime","localStorage","saveProperties","sdkData","diagnosticSdkData","loadProperties","localStorageAvailable","nextEventTime","timeNow","floor","stop","setStreaming","enabled","createConsoleLogger","level","maybePrefix","prefix","allLevels","minLevelIndex","log","levelIndex","outputFn","msg","levelName","initialize","env","specifiedOptions","createLogger","initializationStateTracker","InitializationStateTracker","diagnosticsEnabled","diagnostics","diagnosticsManager","useLocalStorage","streamActive","subscribedToChangeEvents","eventProcessor","flushTimer","processor","mainEventsUrl","summarizer","userFilter","inlineUsers","queue","lastKnownPastTime","disabled","exceededCapacity","shouldSampleEvent","shouldDebugEvent","debugEventsUntilDate","makeOutputEvent","userKey","addToOutbox","enqueue","addFullEvent","addDebugEvent","trackEvents","debugEvent","flush","eventsToSend","summary","responseInfo","flushTick","EventProcessor","seenRequests","streamForcedState","inited","closed","firstEvent","initialUser","onChange","setUser","u","Identity","enqueueEvent","userValidator","isDoNotTrack","sendFlagEvent","detail","defaultValue","includeReason","now","cacheKey","cached","variationIndex","flagVersion","trackReason","reason","variationDetailInternal","sendEvent","includeReasonInEvent","deleted","getFlagDetail","errorKind","connectStream","ping","requestedFlags","replaceAllFlags","put","patch","oldFlag","mods","newFlag","newDetail","previous","current","handleFlagChanges","delete","disconnectStream","newFlags","changes","changeEventParams","changeEvent","updateStreamingState","shouldBeStreaming","isChangeEventKey","toUpperCase","_typeof","metadata","readFlagsFromBootstrap","state","getInitialState","initFromStateProvider","realUser","signalSuccessfulInit","storedFlags","signalFailedInit","finishInit","client","waitForInitialization","waitUntilReady","identify","onDone","flagValueMap","variationDetail","track","metricValue","customEventFilter","getCurrentUrl","haveListeners","newState","allFlags","finishClose","getFlagsInternal","getEnvironmentId","internalChangeEventName"],"mappings":"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"}