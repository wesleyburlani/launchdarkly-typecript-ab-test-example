{
  "_args": [
    [
      "ts-node",
      "/home/oem/Documentos/repository/optimizely-typescript-examples"
    ]
  ],
  "_from": "ts-node@latest",
  "_hasShrinkwrap": false,
  "_id": "ts-node@8.7.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/ts-node",
  "_nodeVersion": "13.3.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/ts-node_8.7.0_1583178186219_0.7263204203398994"
  },
  "_npmUser": {
    "email": "cspotcode@gmail.com",
    "name": "cspotcode"
  },
  "_npmVersion": "6.14.0",
  "_phantomChildren": {},
  "_requested": {
    "name": "ts-node",
    "raw": "ts-node",
    "rawSpec": "",
    "scope": null,
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/ts-node/-/ts-node-8.7.0.tgz",
  "_shasum": "266186947596bef9f3a034687595b30e31b20976",
  "_shrinkwrap": null,
  "_spec": "ts-node",
  "_where": "/home/oem/Documentos/repository/optimizely-typescript-examples",
  "author": {
    "email": "hello@blakeembrey.com",
    "name": "Blake Embrey",
    "url": "http://blakeembrey.me"
  },
  "bin": {
    "ts-node": "dist/bin.js",
    "ts-node-script": "dist/bin-script.js",
    "ts-node-transpile-only": "dist/bin-transpile.js",
    "ts-script": "dist/bin-script-deprecated.js"
  },
  "bugs": {
    "url": "https://github.com/TypeStrong/ts-node/issues"
  },
  "dependencies": {
    "arg": "^4.1.0",
    "diff": "^4.0.1",
    "make-error": "^1.1.1",
    "source-map-support": "^0.5.6",
    "yn": "3.1.1"
  },
  "description": "TypeScript execution environment and REPL for node.js, with source map support",
  "devDependencies": {
    "@types/chai": "^4.0.4",
    "@types/diff": "^4.0.2",
    "@types/mocha": "^5.0.0",
    "@types/node": "^12.7.12",
    "@types/proxyquire": "^1.3.28",
    "@types/react": "^16.0.2",
    "@types/semver": "^6.0.0",
    "@types/source-map-support": "^0.5.0",
    "axios": "^0.19.0",
    "chai": "^4.0.1",
    "istanbul": "^0.4.0",
    "mocha": "^6.1.4",
    "ntypescript": "^1.201507091536.1",
    "proxyquire": "^2.0.0",
    "react": "^16.0.0",
    "rimraf": "^3.0.0",
    "semver": "^6.1.0",
    "tslint": "^5.11.0",
    "tslint-config-standard": "^9.0.0",
    "typescript": "^3.7.2",
    "typescript-json-schema": "0.40.0"
  },
  "directories": {},
  "dist": {
    "fileCount": 30,
    "integrity": "sha512-s659CsHrsxaRVDEleuOkGvbsA0rWHtszUNEt1r0CgAFN5ZZTQtDzpsluS7W5pOGJIa1xZE8R/zK4dEs+ldFezg==",
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeXWHKCRA9TVsSAnZWagAAp7wP/Rbw5IJf1l4rgbalRzQF\nh+bsvMbcfa/ybFy4kuw+pmtepM7Iy/wX8A0NRUJrokcLAHNk12tcygo8A66K\nF8RX+CKhf4lw0/1X80Hx17CzBoqZi4kXbSyta7qFyUYoUEzZS7gzPQYReo38\nN/VEYByBr5Vlv4hb8Gy2PRa2p+NRRLQEozI0F404u9GBk7KVwC3p6LzREN9A\n9PP2i4bzpUVjt0jLSE9lQfNTOj5Q2ww3YSiJ4pceTmzxMT197vqcqEK1G8gc\ntiYOLe7wpSiX2kHXxE3aAK7rsNFqi7FJx8CwlyYMC5EtmWsmlLWBTV6jvwHy\n9LAncYI9T9cMf0oGnfbNqovACkJSrNZDjVNyNHuUM1QwQEM0HfeXbddMB9Kr\nM/QVe8eh4QxloFhuUuQMX9SnamF+B0jSg+TDy+6VVXruRABn5dJfyBRT5xLZ\nJS0CH5YrpFQEsKZzfQTsTlzyK+4n0CobAC8EygmFM7PTaYOmAzf+YO4Rrf+M\nhORXosgBBwJS4KC4E2QuKu/GzNxwa04q4inUhetD5mO8WqjUBVAR0Dlhf+Vq\nj7tu/kVPX5rQnnbwIUjg4NUsUG2hNjaSx+YYznjX42DV6NA+57mmaUlAUz+n\n2RRGIqs7zkD+Z50GzUI5fotIBsIyw02P2oqTPbLHSNvpoPsgtEYdAMUP3Loz\nVqy/\r\n=tAAC\r\n-----END PGP SIGNATURE-----\r\n",
    "shasum": "266186947596bef9f3a034687595b30e31b20976",
    "tarball": "https://registry.npmjs.org/ts-node/-/ts-node-8.7.0.tgz",
    "unpackedSize": 246035
  },
  "engines": {
    "node": ">=6.0.0"
  },
  "homepage": "https://github.com/TypeStrong/ts-node",
  "keywords": [
    "compiler",
    "environment",
    "node",
    "runtime",
    "ts",
    "typescript"
  ],
  "license": "MIT",
  "main": "dist/index.js",
  "maintainers": [
    {
      "name": "blakeembrey",
      "email": "hello@blakeembrey.com"
    },
    {
      "name": "cspotcode",
      "email": "cspotcode@gmail.com"
    }
  ],
  "name": "ts-node",
  "optionalDependencies": {},
  "peerDependencies": {
    "typescript": ">=2.7"
  },
  "readme": "# ![TypeScript Node](logo.svg)\n\n[![NPM version][npm-image]][npm-url]\n[![NPM downloads][downloads-image]][downloads-url]\n[![Build status][travis-image]][travis-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n\n> TypeScript execution and REPL for node.js, with source map support. **Works with `typescript@>=2.7`**.\n\n## Installation\n\n```sh\n# Locally in your project.\nnpm install -D ts-node\nnpm install -D typescript\n\n# Or globally with TypeScript.\nnpm install -g ts-node\nnpm install -g typescript\n```\n\n**Tip:** Installing modules locally allows you to control and share the versions through `package.json`. TS Node will always resolve the compiler from `cwd` before checking relative to its own installation.\n\n## Usage\n\n```sh\n# Execute a script as `node` + `tsc`.\nts-node script.ts\n\n# Starts a TypeScript REPL.\nts-node\n\n# Execute code with TypeScript.\nts-node -e 'console.log(\"Hello, world!\")'\n\n# Execute, and print, code with TypeScript.\nts-node -p -e '\"Hello, world!\"'\n\n# Pipe scripts to execute with TypeScript.\necho 'console.log(\"Hello, world!\")' | ts-node\n```\n\n![TypeScript REPL](https://github.com/TypeStrong/ts-node/raw/master/screenshot.png)\n\n### Programmatic\n\nYou can require `ts-node` and register the loader for future requires by using `require('ts-node').register({ /* options */ })`. You can also use file shortcuts - `node -r ts-node/register` or `node -r ts-node/register/transpile-only` - depending on your preferences.\n\n**Note:** If you need to use advanced node.js CLI arguments (e.g. `--inspect`), use them with `node -r ts-node/register` instead of the `ts-node` CLI.\n\n#### Developers\n\n**TS Node** exports a `create()` function that can be used to initialize a TypeScript compiler that isn't registered to `require.extensions`, and it uses the same code as `register`.\n\n### Mocha\n\nMocha 6\n\n```sh\nmocha --require ts-node/register --watch-extensions ts,tsx \"test/**/*.{ts,tsx}\" [...args]\n```\n\n**Note:** `--watch-extensions` is only used in `--watch` mode.\n\nMocha 7\n\n```sh\nmocha --require ts-node/register --extensions ts,tsx --watch --watch-files src 'tests/**/*.{ts,tsx}' [...args]\n```\n\n### Tape\n\n```sh\nts-node node_modules/tape/bin/tape [...args]\n```\n\n### Gulp\n\n```sh\n# Create a `gulpfile.ts` and run `gulp`.\ngulp\n```\n\n### Visual Studio Code\n\nCreate a new node.js configuration, add `-r ts-node/register` to node args and move the `program` to the `args` list (so VS Code doesn't look for `outFiles`).\n\n```json\n{\n    \"type\": \"node\",\n    \"request\": \"launch\",\n    \"name\": \"Launch Program\",\n    \"runtimeArgs\": [\n        \"-r\",\n        \"ts-node/register\"\n    ],\n    \"args\": [\n        \"${workspaceFolder}/index.ts\"\n    ]\n}\n```\n\n**Note:** If you are using the `--project <tsconfig.json>` command line argument as per the [Configuration Options](#configuration-options), and want to apply this same behavior when launching in VS Code, add an \"env\" key into the launch configuration: `\"env\": { \"TS_NODE_PROJECT\": \"<tsconfig.json>\" }`.\n\n### IntelliJ (and WebStorm)\n\nCreate a new Node.js configuration and add `-r ts-node/register` to \"Node parameters.\"\n\n**Note:** If you are using the `--project <tsconfig.json>` command line argument as per the [Configuration Options](#configuration-options), and want to apply this same behavior when launching in IntelliJ, specify under \"Environment Variables\": `TS_NODE_PROJECT=<tsconfig.json>`.\n\n## How It Works\n\n**TypeScript Node** works by registering the TypeScript compiler for `.tsx?` and `.jsx?` (when `allowJs == true`) extensions. When node.js has an extension registered (via `require.extensions`), it will use the extension internally for module resolution. When an extension is unknown to node.js, it handles the file as `.js` (JavaScript). By default, **TypeScript Node** avoids compiling files in `/node_modules/` for three reasons:\n\n1. Modules should always be published in a format node.js can consume\n2. Transpiling the entire dependency tree will make your project slower\n3. Differing behaviours between TypeScript and node.js (e.g. ES2015 modules) can result in a project that works until you decide to support a feature natively from node.js\n\n**P.S.** This means if you don't register an extension, it is compiled as JavaScript. When `ts-node` is used with `allowJs`, JavaScript files are transpiled using the TypeScript compiler.\n\n## Loading `tsconfig.json`\n\n**Typescript Node** loads `tsconfig.json` automatically. Use `--skip-project` to skip loading the `tsconfig.json`.\n\n**Tip**: You can use `ts-node` together with [tsconfig-paths](https://www.npmjs.com/package/tsconfig-paths) to load modules according to the `paths` section in `tsconfig.json`.\n\n## Configuration Options\n\nYou can set options by passing them before the script path, via programmatic usage or via environment variables.\n\n```sh\nts-node --compiler ntypescript --project src/tsconfig.json hello-world.ts\n```\n\n**Note:** [`ntypescript`](https://github.com/TypeStrong/ntypescript#readme) is an example of a TypeScript compatible `compiler`.\n\n### CLI Options\n\nSupports `--print`, `--eval`, `--require` and `--interactive` similar to the [node.js CLI options](https://nodejs.org/api/cli.html).\n\n* `--help` Prints help text\n* `--version` Prints version information\n\n### CLI and Programmatic Options\n\n_Environment variable denoted in parentheses._\n\n* `-T, --transpile-only` Use TypeScript's faster `transpileModule` (`TS_NODE_TRANSPILE_ONLY`, default: `false`)\n* `-I, --ignore [pattern]` Override the path patterns to skip compilation (`TS_NODE_IGNORE`, default: `/node_modules/`)\n* `-P, --project [path]` Path to TypeScript JSON project file (`TS_NODE_PROJECT`)\n* `-C, --compiler [name]` Specify a custom TypeScript compiler (`TS_NODE_COMPILER`, default: `typescript`)\n* `-D, --ignore-diagnostics [code]` Ignore TypeScript warnings by diagnostic code (`TS_NODE_IGNORE_DIAGNOSTICS`)\n* `-O, --compiler-options [opts]` JSON object to merge with compiler options (`TS_NODE_COMPILER_OPTIONS`)\n* `--dir` Specify working directory for config resolution (`TS_NODE_CWD`, default: `process.cwd()`)\n* `--scope` Scope compiler to files within `cwd` (`TS_NODE_SCOPE`, default: `false`)\n* `--files` Load `files`, `include` and `exclude` from `tsconfig.json` on startup (`TS_NODE_FILES`, default: `false`)\n* `--pretty` Use pretty diagnostic formatter (`TS_NODE_PRETTY`, default: `false`)\n* `--skip-project` Skip project config resolution and loading (`TS_NODE_SKIP_PROJECT`, default: `false`)\n* `--skip-ignore` Skip ignore checks (`TS_NODE_SKIP_IGNORE`, default: `false`)\n* `--emit` Emit output files into `.ts-node` directory (`TS_NODE_EMIT`, default: `false`)\n* `--prefer-ts-exts` Re-order file extensions so that TypeScript imports are preferred (`TS_NODE_PREFER_TS_EXTS`, default: `false`)\n* `--log-error` Logs TypeScript errors to stderr instead of throwing exceptions (`TS_NODE_LOG_ERROR`, default: `false`)\n\n### Programmatic Only Options\n\n* `transformers` `_ts.CustomTransformers | ((p: _ts.Program) => _ts.CustomTransformers)` An object with transformers or a function that accepts a program and returns an transformers object to pass to TypeScript. Function isn't available with `transpileOnly` flag\n* `readFile` Custom TypeScript-compatible file reading function\n* `fileExists` Custom TypeScript-compatible file existence function\n\n## SyntaxError\n\nAny error that is not a `TSError` is from node.js (e.g. `SyntaxError`), and cannot be fixed by TypeScript or `ts-node`. These are runtime issues with your code.\n\n### Import Statements\n\nCurrent node.js stable releases do not support ES modules. Additionally, `ts-node` does not have the required hooks into node.js to support ES modules. You will need to set `\"module\": \"commonjs\"` in your `tsconfig.json` for your code to work.\n\n## Help! My Types Are Missing!\n\n**TypeScript Node** does _not_ use `files`, `include` or `exclude`, by default. This is because a large majority projects do not use all of the files in a project directory (e.g. `Gulpfile.ts`, runtime vs tests) and parsing every file for types slows startup time. Instead, `ts-node` starts with the script file (e.g. `ts-node index.ts`) and TypeScript resolves dependencies based on imports and references.\n\nFor global definitions, you can use the `typeRoots` compiler option.  This requires that your type definitions be structured as type packages (not loose TypeScript definition files). More details on how this works can be found in the [TypeScript Handbook](https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#types-typeroots-and-types).\n\nExample `tsconfig.json`:\n\n```\n{\n  \"compilerOptions\": {\n    \"typeRoots\" : [\"./node_modules/@types\", \"./typings\"]\n  }\n}\n```\n\nExample project structure:\n\n```\n<project_root>/\n-- tsconfig.json\n-- typings/\n  -- <module_name>/\n    -- index.d.ts\n```\n\nExample module declaration file:\n\n```\ndeclare module '<module_name>' {\n    // module definitions go here\n}\n```\n\nFor module definitions, you can use [`paths`](https://www.typescriptlang.org/docs/handbook/module-resolution.html#path-mapping):\n\n```json\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"custom-module-type\": [\"types/custom-module-type\"]\n    }\n  }\n}\n```\n\nAn alternative approach for definitions of third-party libraries are [triple-slash directives](https://www.typescriptlang.org/docs/handbook/triple-slash-directives.html). This may be helpful if you prefer not to change your TypeScript `compilerOptions` or structure your custom type definitions when using `typeRoots`. Below is an example of the triple-slash directive as a relative path within your project:\n\n```typescript\n/// <reference types=\"./types/untyped_js_lib\" />\nimport UntypedJsLib from \"untyped_js_lib\"\n```\n\n**Tip:** If you _must_ use `files`, `include`, or `exclude`, enable `--files` flags or set `TS_NODE_FILES=true`.\n\n## Watching and Restarting\n\n**TypeScript Node** compiles source code via `require()`, watching files and code reloads are out of scope for the project. If you want to restart the `ts-node` process on file change, existing node.js tools such as [nodemon](https://github.com/remy/nodemon), [onchange](https://github.com/Qard/onchange) and [node-dev](https://github.com/fgnass/node-dev) work.\n\nThere's also [`ts-node-dev`](https://github.com/whitecolor/ts-node-dev), a modified version of [`node-dev`](https://github.com/fgnass/node-dev) using `ts-node` for compilation and won't restart the process on file change.\n\n## License\n\nMIT\n\n[npm-image]: https://img.shields.io/npm/v/ts-node.svg?style=flat\n[npm-url]: https://npmjs.org/package/ts-node\n[downloads-image]: https://img.shields.io/npm/dm/ts-node.svg?style=flat\n[downloads-url]: https://npmjs.org/package/ts-node\n[travis-image]: https://img.shields.io/travis/TypeStrong/ts-node.svg?style=flat\n[travis-url]: https://travis-ci.org/TypeStrong/ts-node\n[coveralls-image]: https://img.shields.io/coveralls/TypeStrong/ts-node.svg?style=flat\n[coveralls-url]: https://coveralls.io/r/TypeStrong/ts-node?branch=master\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/TypeStrong/ts-node.git"
  },
  "scripts": {
    "build": "npm run clean && npm run build-tsc && npm run build-configSchema",
    "build-configSchema": "typescript-json-schema --topRef --refs --validationKeywords allOf --out tsconfig.schema.json tsconfig.json TsConfigSchema && node --require ./register ./scripts/create-merged-schema",
    "build-tsc": "tsc",
    "clean": "rimraf dist && rimraf tsconfig.schema.json && rimraf tsconfig.schemastore-schema.json",
    "lint": "tslint \"src/**/*.ts\" --project tsconfig.json",
    "lint-fix": "tslint \"src/**/*.ts\" --project tsconfig.json --fix",
    "prepare": "npm run build",
    "test": "npm run build && npm run lint && npm run test-cov",
    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- \"dist/**/*.spec.js\" -R spec --bail",
    "test-spec": "mocha dist/**/*.spec.js -R spec --bail"
  },
  "types": "dist/index.d.ts",
  "version": "8.7.0"
}
